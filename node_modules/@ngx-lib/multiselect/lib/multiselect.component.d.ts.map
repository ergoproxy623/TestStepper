{"version":3,"file":"multiselect.component.d.ts","sources":["multiselect.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, TemplateRef, EventEmitter } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { NgxMultiselectService } from './services/multiselect.service';\nexport declare const DEFAULT_VALUE_ACCESSOR: any;\nexport declare class NgxMultiselectComponent implements ControlValueAccessor {\n    private elementRef;\n    private multiselectService;\n    constructor(elementRef: ElementRef, multiselectService: NgxMultiselectService);\n    private _multiple;\n    private _theme;\n    private _optionsCopy;\n    private _isOpen;\n    private operationPendingQueue;\n    _selectedOptions: any | any[];\n    _defaultPropertyMap: {\n        id: string;\n        name: string;\n        disabled: string;\n    };\n    _defaultPropertyMapLength: number;\n    _options: any;\n    matMultiselect: boolean;\n    bsMultiselect: boolean;\n    disabled: boolean;\n    color: string;\n    groupedProperty: string;\n    showHelperElements: boolean;\n    showSearchFilter: boolean;\n    showMaxLabels: number;\n    _optionsTemplate: TemplateRef<any>;\n    get optionsTemplate(): TemplateRef<any>;\n    set optionsTemplate(template: TemplateRef<any>);\n    get theme(): string;\n    set theme(val: string);\n    set isOpen(value: boolean);\n    get isOpen(): boolean;\n    set propertyMap(val: any);\n    get multiple(): boolean;\n    set multiple(value: boolean);\n    set options(collection: any);\n    onOpen: EventEmitter<any>;\n    onClose: EventEmitter<any>;\n    onItemClick: EventEmitter<any>;\n    onGroupItemClick: EventEmitter<any>;\n    onSelectAll: EventEmitter<any>;\n    onSelectNone: EventEmitter<any>;\n    onReset: EventEmitter<any>;\n    onClear: EventEmitter<any>;\n    onSearchChange: EventEmitter<any>;\n    filterOptions: any;\n    addOperation(item: any): void;\n    popOperation(): any;\n    finishPendingOperations(): void;\n    isOperationPending(): number;\n    private _initialValue;\n    set initialValue(value: any);\n    get initialValue(): any;\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    writeValue(value: any): void;\n    private formatPrepopulatedValues;\n    registerOnChange(fn: (value: any) => any): void;\n    registerOnTouched(fn: () => any): void;\n    setOptions(options: any): void;\n    getOptions(): any[];\n    getOptionsCopy(): any[];\n    filterOptionsList: (val: string) => void;\n    isValueSelected(): any;\n    searchChange(val: string): void;\n    close(): void;\n    removeItem(collection: any, item: any): void;\n    toggleDropdown(): void;\n    prepopulateOptions(selected: any): void;\n    select(option: any): void;\n    selectAll(): void;\n    selectNone(): void;\n    borderBottom(): {\n        borderBottom: string;\n    } | {\n        borderBottom?: undefined;\n    };\n    selectGroup(group: any): void;\n    reset(): void;\n    viewToModel(selected: any): void;\n    clear(event: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    ngOnInit(): void;\n    clickOutSide(event: any): void;\n}\n"]}