/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/display-selected-value.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
/** @type {?} */
const DOTS = ' ...';
export class DisplaySelectedValuePipe {
    constructor() {
        this.defaultMaxLabelCount = 3;
    }
    /**
     * @param {?} value
     * @param {?=} maxLabelCount
     * @return {?}
     */
    transform(value, maxLabelCount = this.defaultMaxLabelCount) {
        if (value instanceof Array) {
            /** @type {?} */
            const collection = [...value];
            /** @type {?} */
            var total = collection.length;
            /** @type {?} */
            const condn = collection.length > maxLabelCount;
            condn ? (collection.length = maxLabelCount) : null;
            return `${collection.map((/**
             * @param {?} v
             * @return {?}
             */
            v => v.name)).join(', ')}${condn ? DOTS + ' (' + total + ')' : ''}`;
        }
        return value && value.name;
    }
}
DisplaySelectedValuePipe.decorators = [
    { type: Pipe, args: [{
                name: 'displaySelectedValue',
                pure: false
            },] }
];
if (false) {
    /** @type {?} */
    DisplaySelectedValuePipe.prototype.defaultMaxLabelCount;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGxheS1zZWxlY3RlZC12YWx1ZS5waXBlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9wYW5rYWpwYXJrYXIvRG9jdW1lbnRzL0dpdEh1Yi9tdWx0aXNlbGVjdC9wcm9qZWN0cy9tdWx0aXNlbGVjdC9zcmMvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvZGlzcGxheS1zZWxlY3RlZC12YWx1ZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7O01BRTlDLElBQUksR0FBRyxNQUFNO0FBTW5CLE1BQU0sT0FBTyx3QkFBd0I7SUFKckM7UUFLRSx5QkFBb0IsR0FBVyxDQUFDLENBQUM7SUFhbkMsQ0FBQzs7Ozs7O0lBWkMsU0FBUyxDQUFDLEtBQVUsRUFBRSxnQkFBd0IsSUFBSSxDQUFDLG9CQUFvQjtRQUNyRSxJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUU7O2tCQUVwQixVQUFVLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQzs7Z0JBQ3pCLEtBQUssR0FBRyxVQUFVLENBQUMsTUFBTTs7a0JBQ3ZCLEtBQUssR0FBRyxVQUFVLENBQUMsTUFBTSxHQUFHLGFBQWE7WUFDL0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVuRCxPQUFPLEdBQUcsVUFBVSxDQUFDLEdBQUc7Ozs7WUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFDLEtBQUssR0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1NBQ3pGO1FBQ0QsT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQztJQUM3QixDQUFDOzs7WUFqQkYsSUFBSSxTQUFDO2dCQUNKLElBQUksRUFBRSxzQkFBc0I7Z0JBQzVCLElBQUksRUFBRSxLQUFLO2FBQ1o7Ozs7SUFFQyx3REFBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IERPVFMgPSAnIC4uLic7XG5cbkBQaXBlKHtcbiAgbmFtZTogJ2Rpc3BsYXlTZWxlY3RlZFZhbHVlJyxcbiAgcHVyZTogZmFsc2Vcbn0pXG5leHBvcnQgY2xhc3MgRGlzcGxheVNlbGVjdGVkVmFsdWVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIGRlZmF1bHRNYXhMYWJlbENvdW50OiBudW1iZXIgPSAzO1xuICB0cmFuc2Zvcm0odmFsdWU6IGFueSwgbWF4TGFiZWxDb3VudDogbnVtYmVyID0gdGhpcy5kZWZhdWx0TWF4TGFiZWxDb3VudCk6IGFueSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcblxuICAgICAgY29uc3QgY29sbGVjdGlvbiA9IFsuLi52YWx1ZV07XG4gICAgICB2YXIgdG90YWwgPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIGNvbnN0IGNvbmRuID0gY29sbGVjdGlvbi5sZW5ndGggPiBtYXhMYWJlbENvdW50O1xuICAgICAgY29uZG4gPyAoY29sbGVjdGlvbi5sZW5ndGggPSBtYXhMYWJlbENvdW50KSA6IG51bGw7XG5cbiAgICAgIHJldHVybiBgJHtjb2xsZWN0aW9uLm1hcCh2ID0+IHYubmFtZSkuam9pbignLCAnKX0ke2NvbmRuID8gRE9UUyArICcgKCcrdG90YWwrJyknIDogJyd9YDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLm5hbWU7XG4gIH1cbn1cbiJdfQ==