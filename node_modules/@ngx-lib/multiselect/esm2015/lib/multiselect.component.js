/**
 * @fileoverview added by tsickle
 * Generated from: lib/multiselect.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectionStrategy, ElementRef, ContentChild, TemplateRef, Output, EventEmitter, ViewChild, HostBinding, HostListener } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NgxMultiselectService } from './services/multiselect.service';
import { forwardRef } from '@angular/core';
import { FilterOptionsComponent } from './filter-options/filter-options.component';
/** @type {?} */
export const DEFAULT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => NgxMultiselectComponent)),
    multi: true
};
export class NgxMultiselectComponent {
    /**
     * @param {?} elementRef
     * @param {?} multiselectService
     */
    constructor(elementRef, multiselectService) {
        this.elementRef = elementRef;
        this.multiselectService = multiselectService;
        this._theme = 'material';
        this._isOpen = false;
        this.operationPendingQueue = [];
        // public variables
        this._selectedOptions = null;
        this._defaultPropertyMap = {
            id: 'id',
            name: 'name',
            disabled: 'disabled'
        };
        this._defaultPropertyMapLength = Object.keys(this._defaultPropertyMap).length;
        this.matMultiselect = true;
        this.bsMultiselect = false;
        // Input bindings
        this.disabled = false;
        this.color = 'blue';
        this.showHelperElements = true;
        this.showSearchFilter = true;
        this.showMaxLabels = 3;
        // Output bindings
        this.onOpen = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onItemClick = new EventEmitter();
        this.onGroupItemClick = new EventEmitter();
        this.onSelectAll = new EventEmitter();
        this.onSelectNone = new EventEmitter();
        this.onReset = new EventEmitter();
        this.onClear = new EventEmitter();
        this.onSearchChange = new EventEmitter();
        this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
        this.filterOptionsList = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            /** @type {?} */
            const optionsCopy = this.getOptionsCopy();
            /** @type {?} */
            let result = optionsCopy;
            if (val) {
                result = optionsCopy.filter((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i.name && i.name.toLowerCase().indexOf(val.toLowerCase()) !== -1));
            }
            this.setOptions(result);
            this.prepopulateOptions(this._selectedOptions);
        });
    }
    /**
     * @return {?}
     */
    get optionsTemplate() {
        return this._optionsTemplate;
    }
    /**
     * @param {?} template
     * @return {?}
     */
    set optionsTemplate(template) {
        this._optionsTemplate = template;
    }
    /**
     * @return {?}
     */
    get theme() {
        return this._theme;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set theme(val) {
        this._theme = val;
        this.matMultiselect = val === 'material';
        this.bsMultiselect = val === 'bootstrap';
    }
    // Input binding with getter / setter
    /**
     * @param {?} value
     * @return {?}
     */
    set isOpen(value) {
        this._isOpen = value;
        // onOpen and onClose event will be fired by isOpen setter
        if (value) {
            // list populate, based on empty value
            this.filterOptionsList('');
            this.onTouched();
            this.onOpen.emit();
        }
        else {
            this.onClose.emit();
        }
    }
    /**
     * @return {?}
     */
    get isOpen() {
        return this._isOpen;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set propertyMap(val) {
        this._defaultPropertyMap = Object.assign(Object.assign({}, this._defaultPropertyMap), val);
    }
    /**
     * @return {?}
     */
    get multiple() {
        return this._multiple;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set multiple(value) {
        this.viewToModel(value ? [] : null);
        this._multiple = value;
    }
    /**
     * @param {?} collection
     * @return {?}
     */
    set options(collection) {
        if (!collection)
            return;
        this._optionsCopy = this.multiselectService.mapDatasourceToFields(collection, this._defaultPropertyMap, this.groupedProperty);
        /** @type {?} */
        const options = this.getOptionsCopy();
        this.setOptions(options);
        // Sometimes binding can happens lazily, 
        // so `finishPendingOperations` helps to execute such operations
        if (this.isOperationPending())
            this.finishPendingOperations();
    }
    // Adding pending operation in queue
    /**
     * @param {?} item
     * @return {?}
     */
    addOperation(item) {
        this.operationPendingQueue.push(item);
    }
    // Poping pending operation from queue sequentially
    /**
     * @return {?}
     */
    popOperation() {
        return this.operationPendingQueue.pop();
    }
    /*
        In future this code is going to resides inside different Service,
        This pendingOperation feature is fine grained in future,
        and can be used for multiple purpose like model update, collection update, etc.
      */
    // Extracting and finishing all pending operation
    /**
     * @return {?}
     */
    finishPendingOperations() {
        /** @type {?} */
        const operation = this.popOperation();
        this.prepopulateOptions(operation);
    }
    // Check pending operation queue status
    /**
     * @return {?}
     */
    isOperationPending() {
        return this.operationPendingQueue.length;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set initialValue(value) {
        this._initialValue = value;
    }
    /**
     * @return {?}
     */
    get initialValue() {
        return this._initialValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        // Set selected value for initial load of value
        if (value) {
            this.initialValue = value;
            this._options ? this.prepopulateOptions(value) : this.addOperation(value);
            this.formatPrepopulatedValues(value);
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    formatPrepopulatedValues(value) {
        /** @type {?} */
        let options = value;
        // TODO: can we improve below logic?
        if (Object.keys(this._defaultPropertyMap).length == this._defaultPropertyMapLength)
            return;
        /** @type {?} */
        const swappedPropertyMap = this.multiselectService.mirrorObject(this._defaultPropertyMap);
        if (this.multiple) {
            options.forEach((/**
             * @param {?} o
             * @return {?}
             */
            o => {
                o.id = o[swappedPropertyMap.id];
                o.name = o[swappedPropertyMap.name];
            }));
        }
        else {
            value.id = value[swappedPropertyMap.id];
            value.name = value[swappedPropertyMap.name];
            options = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    // All update to options should happen from below method.
    /**
     * @param {?} options
     * @return {?}
     */
    setOptions(options) {
        this._options = options;
    }
    /**
     * @return {?}
     */
    getOptions() {
        return this._options ? [...this._options] : [];
    }
    /**
     * @return {?}
     */
    getOptionsCopy() {
        return this._optionsCopy ? [...this._optionsCopy] : [];
    }
    /**
     * @return {?}
     */
    isValueSelected() {
        return this._selectedOptions && this._multiple ?
            this._selectedOptions.length :
            this._selectedOptions;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    searchChange(val) {
        this.filterOptionsList(val);
        this.onSearchChange.emit(val);
    }
    /**
     * @return {?}
     */
    close() {
        this.isOpen = false;
    }
    /**
     * @param {?} collection
     * @param {?} item
     * @return {?}
     */
    removeItem(collection, item) {
        item.ticked = false;
        /** @type {?} */
        const index = collection.findIndex((/**
         * @param {?} o
         * @return {?}
         */
        o => o.id === item.id));
        collection.splice(index, 1);
    }
    /**
     * @return {?}
     */
    toggleDropdown() {
        this.isOpen = !this.isOpen;
    }
    /**
     * @param {?} selected
     * @return {?}
     */
    prepopulateOptions(selected) {
        /** @type {?} */
        let selectedIds = [];
        selectedIds = this._multiple ?
            (selected || []).map((/**
             * @param {?} i
             * @return {?}
             */
            i => i.id)) :
            selected ? [selected.id] : [];
        this.setOptions(this.getOptions()
            .map((/**
         * @param {?} o
         * @return {?}
         */
        o => (Object.assign(Object.assign({}, o), { ticked: selectedIds.indexOf(o.id) !== -1 })))));
        // TODO: do we really need this reassignment?
        this.viewToModel(selected);
    }
    /**
     * @param {?} option
     * @return {?}
     */
    select(option) {
        /** @type {?} */
        let selectedOptions;
        option.ticked = !option.ticked;
        // TODO: Refactor below logic
        if (this._multiple) {
            selectedOptions = [...this._selectedOptions];
            /** @type {?} */
            let selectedIds = selectedOptions.map((/**
             * @param {?} i
             * @return {?}
             */
            i => i.id));
            if (selectedIds.indexOf(option.id) === -1) {
                // if selected item not exist in collection, push it
                selectedOptions.push(option);
            }
            else {
                // if selected item exist in collection, post it
                this.removeItem(selectedOptions, option);
            }
            selectedIds = selectedOptions.map((/**
             * @param {?} i
             * @return {?}
             */
            i => i.id));
        }
        else {
            // TODO: find optimized way to do below
            /** @type {?} */
            let val = option && option.id;
            /** @type {?} */
            let changedOptions = this.getOptions()
                .map((/**
             * @param {?} o
             * @return {?}
             */
            o => (Object.assign(Object.assign({}, o), { ticked: o.id == val }))));
            selectedOptions = changedOptions.find((/**
             * @param {?} i
             * @return {?}
             */
            i => i.ticked));
            this.setOptions(changedOptions);
            this.close();
        }
        this.viewToModel(selectedOptions);
        this.onItemClick.emit(option);
    }
    /**
     * @return {?}
     */
    selectAll() {
        /** @type {?} */
        let allSelectedOptions = this.getOptions()
            .map((/**
         * @param {?} o
         * @return {?}
         */
        o => (Object.assign(Object.assign({}, o), { ticked: true }))));
        this.setOptions(allSelectedOptions);
        this.viewToModel(allSelectedOptions);
        this.onSelectAll.emit();
    }
    /**
     * @return {?}
     */
    selectNone() {
        /** @type {?} */
        const options = this.getOptions().map((/**
         * @param {?} o
         * @return {?}
         */
        o => (Object.assign(Object.assign({}, o), { ticked: false }))));
        this.setOptions(options);
        this.viewToModel([]);
        this.onSelectNone.emit();
    }
    /**
     * @return {?}
     */
    borderBottom() {
        return this._isOpen ? { borderBottom: `1px solid ${this.matMultiselect ? this.color : 'transperant'}` } : {};
    }
    //TODO: Optimized below logic, it can be done in lesser steps
    /**
     * @param {?} group
     * @return {?}
     */
    selectGroup(group) {
        const { ticked, values } = group;
        /** @type {?} */
        const options = this.getOptions();
        /** @type {?} */
        let selectedValues = [...this._selectedOptions];
        /** @type {?} */
        let selectedIds = selectedValues.map((/**
         * @param {?} s
         * @return {?}
         */
        s => s.id));
        /** @type {?} */
        const allGroupOptionIds = values.map((/**
         * @param {?} v
         * @return {?}
         */
        v => v.id));
        // Get all ticked options
        // concat with selected options
        selectedValues = ticked
            ? selectedValues.concat(values)
            : selectedValues.filter((/**
             * @param {?} o
             * @return {?}
             */
            o => allGroupOptionIds.indexOf(o.id) === -1));
        // Find unique out of them
        selectedIds = this.multiselectService.findUnique(selectedValues.map((/**
         * @param {?} item
         * @return {?}
         */
        item => item.id)));
        // build selectedOptions array again
        selectedValues = options.filter((/**
         * @param {?} o
         * @return {?}
         */
        o => selectedIds.indexOf(o.id) !== -1));
        this.viewToModel(selectedValues);
        this.onGroupItemClick.emit(group);
    }
    /**
     * @return {?}
     */
    reset() {
        this.viewToModel(this.initialValue);
        this.prepopulateOptions(this.initialValue);
        this.onReset.emit();
    }
    // Responsible for updating value from view to model
    /**
     * @param {?} selected
     * @return {?}
     */
    viewToModel(selected) {
        if (this._selectedOptions !== selected) {
            this._selectedOptions = selected;
            this.onChange(selected);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    clear(event) {
        /** @type {?} */
        let changedOptions = this.getOptions().map((/**
         * @param {?} o
         * @return {?}
         */
        o => (Object.assign(Object.assign({}, o), { ticked: false }))));
        this.setOptions(changedOptions);
        // no value is selected so passing null
        this.viewToModel(null);
        this.onClear.emit();
        this.close();
        event.stopPropagation();
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // Check if value have not been assigned then default to true
        if (typeof this._multiple === 'undefined') {
            this.multiple = true;
        }
    }
    // TODO: Consider creating a directive for this.
    // TODO: Also convert below to be work for element specific
    /**
     * @param {?} event
     * @return {?}
     */
    clickOutSide(event) {
        if (this.isOpen &&
            this.elementRef.nativeElement !== event &&
            !this.multiselectService.closest(event, 'ngx-multiselect')) {
            this.close();
        }
    }
}
NgxMultiselectComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-multiselect',
                template: "<div class=\"multiselect-wrapper\">\n  <button class=\"dropdown-button\" (click)=\"toggleDropdown()\" [ngClass]=\"{ open: isOpen }\">\n    <div class=\"selection\" [ngStyle]=\"borderBottom()\">\n      <!-- TODO: None selected template should be ng-template -->\n      <span class=\"none-selected\" *ngIf=\"!isValueSelected()\">None selected</span>\n      <span class=\"selected\" *ngIf=\"isValueSelected()\">\n        <span class=\"text\">{{_selectedOptions | displaySelectedValue: showMaxLabels}}</span>\n      </span>\n      <div class=\"symbols\">\n        <span class=\"close\" (click)=\"clear($event)\" *ngIf=\"isValueSelected() && !multiple\">\u00D7</span>\n        <span class=\"caret\"></span>\n      </div>\n    </div>\n  </button>\n  <div class=\"listing-wrapper\" *ngIf=\"isOpen\">\n    <ms-helper-elements\n      *ngIf=\"showHelperElements\"\n      [multiple]=\"multiple\"\n      [disabled]=\"disabled\"\n      (onClear)=\"onClear.emit()\"\n      (resetClicked)=\"reset()\"\n      (onSearchChange)=\"onSearchChange.emit($event)\"\n      (selectNoneClicked)=\"selectNone()\"\n      (selectAllClicked)=\"selectAll()\"\n      (selectNoneClicked)=\"selectNone()\"\n    >\n    </ms-helper-elements>\n    <ms-filter-options\n      *ngIf=\"showSearchFilter\"\n      #filterOptions\n      (onSearchChange)=\"searchChange($event)\"\n    ></ms-filter-options>\n    <ng-container *ngIf=\"!groupedProperty; else groupedTemplate\">\n      <ms-options\n        [optionsTemplate]=\"optionsTemplate\"\n        [options]=\"_options\"\n        [disabled]=\"disabled\"\n        (selectOption)=\"select($event)\"\n      ></ms-options>\n    </ng-container>\n  </div>\n</div>\n<ng-template #groupedTemplate>\n  <ms-grouped-options\n    [multiple]=\"multiple\"\n    [optionsTemplate]=\"optionsTemplate\"\n    [selectedOptions]=\"_selectedOptions\"\n    [options]=\"_options\"\n    [disabled]=\"disabled\"\n    [groupedProperty]=\"groupedProperty\"\n    (selectOption)=\"select($event)\"\n    (selectGroup)=\"selectGroup($event)\"\n  >\n  </ms-grouped-options>\n</ng-template>\n",
                providers: [DEFAULT_VALUE_ACCESSOR],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:inline-block;outline:none}.multiselect-wrapper{display:flex;flex-grow:1;width:240px}.selection{flex-grow:1;justify-content:space-between}.selection,.symbols{align-items:center;display:flex}.symbols{justify-content:flex-end}.symbols .caret{border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid}.dropdown-button{-moz-user-select:none;-ms-user-select:none;-o-user-select:none;-webkit-user-select:none;background-color:#fff;border:none;cursor:pointer;display:flex;flex-grow:1;font-size:inherit;min-height:39px;padding:5px;user-select:none;white-space:normal}.listing-wrapper{background-color:#fff;border:1px solid rgba(0,0,0,.15);border-radius:4px;box-shadow:0 6px 12px rgba(0,0,0,.175);position:absolute;width:inherit;z-index:999}::ng-deep .options-container{height:200px;overflow-y:scroll}:host.mat-multiselect ::ng-deep .option{-webkit-tap-highlight-color:transparent;align-items:center;border-left:.5px solid #eee;display:flex;flex-flow:row;height:40px;max-height:40px;outline:0;overflow:hidden;padding:0 6px;text-overflow:ellipsis;white-space:nowrap}:host.mat-multiselect ::ng-deep .option.marked,:host.mat-multiselect ::ng-deep .option.marked:hover,:host.mat-multiselect ::ng-deep .option:hover:not(.message){background-image:linear-gradient(#e9e9e9,#f1f1f1);color:#555;cursor:pointer;justify-content:space-between}:host.mat-multiselect ::ng-deep .marked:after{content:\"\u2713\"}:host.mat-multiselect ::ng-deep .option.disabled,:host.mat-multiselect ::ng-deep .option.disabled:hover:not(.message),:host.mat-multiselect ::ng-deep .option.disabled label input:hover~span{color:#c4c4c4!important;cursor:not-allowed!important;pointer-events:none}:host.mat-multiselect ::ng-deep .none-selected{-webkit-text-fill-color:#7a7a7a;color:#7a7a7a;transition:none}:host.mat-multiselect ::ng-deep .dropdown-button{color:#000}:host.mat-multiselect ::ng-deep .selection{border-bottom:1px solid #000;color:#000;padding-bottom:10px}:host.mat-multiselect ::ng-deep .open .selection{border-bottom:1px solid #00f}:host.bs-multiselect ::ng-deep .marked{background-color:green}:host.bs-multiselect ::ng-deep .dropdown-button{background-image:linear-gradient(#fff,#f7f7f7);border:1px solid #c6c6c6;border-radius:4px;color:#555}:host.bs-multiselect ::ng-deep .option{align-items:center;background-color:transparent;border-radius:4px;box-shadow:inset 0 1px 1px rgba(0,0,0,.075);color:#555;display:flex;font-size:inherit;height:40px;max-height:40px;padding:0 6px}:host.bs-multiselect ::ng-deep .option:hover{background-image:linear-gradient(#c1c1c1,#999)!important;color:#fff!important;cursor:pointer}:host.bs-multiselect ::ng-deep .option.marked{background-image:linear-gradient(#e9e9e9,#f1f1f1);color:#555;cursor:pointer;display:flex;justify-content:space-between}:host.bs-multiselect ::ng-deep .marked:after{content:\"\u2713\";width:15px}:host.bs-multiselect ::ng-deep .option.disabled,:host.bs-multiselect ::ng-deep .option.disabled:hover,:host.bs-multiselect ::ng-deep .option.disabled label input:hover~span{color:#c4c4c4!important;cursor:not-allowed!important;pointer-events:none}"]
            }] }
];
/** @nocollapse */
NgxMultiselectComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgxMultiselectService }
];
NgxMultiselectComponent.propDecorators = {
    matMultiselect: [{ type: HostBinding, args: ['class.mat-multiselect',] }],
    bsMultiselect: [{ type: HostBinding, args: ['class.bs-multiselect',] }],
    disabled: [{ type: Input }],
    color: [{ type: Input }],
    groupedProperty: [{ type: Input }],
    showHelperElements: [{ type: Input }],
    showSearchFilter: [{ type: Input }],
    showMaxLabels: [{ type: Input }],
    _optionsTemplate: [{ type: ContentChild, args: [TemplateRef,] }],
    optionsTemplate: [{ type: Input }],
    theme: [{ type: Input }],
    isOpen: [{ type: Input }],
    propertyMap: [{ type: Input }],
    multiple: [{ type: Input }],
    options: [{ type: Input }],
    onOpen: [{ type: Output }],
    onClose: [{ type: Output }],
    onItemClick: [{ type: Output }],
    onGroupItemClick: [{ type: Output }],
    onSelectAll: [{ type: Output }],
    onSelectNone: [{ type: Output }],
    onReset: [{ type: Output }],
    onClear: [{ type: Output }],
    onSearchChange: [{ type: Output }],
    filterOptions: [{ type: ViewChild, args: ['filterOptions', { read: FilterOptionsComponent },] }],
    clickOutSide: [{ type: HostListener, args: ['document:click', ['$event.target'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMultiselectComponent.prototype._multiple;
    /**
     * @type {?}
     * @private
     */
    NgxMultiselectComponent.prototype._theme;
    /**
     * @type {?}
     * @private
     */
    NgxMultiselectComponent.prototype._optionsCopy;
    /**
     * @type {?}
     * @private
     */
    NgxMultiselectComponent.prototype._isOpen;
    /**
     * @type {?}
     * @private
     */
    NgxMultiselectComponent.prototype.operationPendingQueue;
    /** @type {?} */
    NgxMultiselectComponent.prototype._selectedOptions;
    /** @type {?} */
    NgxMultiselectComponent.prototype._defaultPropertyMap;
    /** @type {?} */
    NgxMultiselectComponent.prototype._defaultPropertyMapLength;
    /** @type {?} */
    NgxMultiselectComponent.prototype._options;
    /** @type {?} */
    NgxMultiselectComponent.prototype.matMultiselect;
    /** @type {?} */
    NgxMultiselectComponent.prototype.bsMultiselect;
    /** @type {?} */
    NgxMultiselectComponent.prototype.disabled;
    /** @type {?} */
    NgxMultiselectComponent.prototype.color;
    /** @type {?} */
    NgxMultiselectComponent.prototype.groupedProperty;
    /** @type {?} */
    NgxMultiselectComponent.prototype.showHelperElements;
    /** @type {?} */
    NgxMultiselectComponent.prototype.showSearchFilter;
    /** @type {?} */
    NgxMultiselectComponent.prototype.showMaxLabels;
    /** @type {?} */
    NgxMultiselectComponent.prototype._optionsTemplate;
    /** @type {?} */
    NgxMultiselectComponent.prototype.onOpen;
    /** @type {?} */
    NgxMultiselectComponent.prototype.onClose;
    /** @type {?} */
    NgxMultiselectComponent.prototype.onItemClick;
    /** @type {?} */
    NgxMultiselectComponent.prototype.onGroupItemClick;
    /** @type {?} */
    NgxMultiselectComponent.prototype.onSelectAll;
    /** @type {?} */
    NgxMultiselectComponent.prototype.onSelectNone;
    /** @type {?} */
    NgxMultiselectComponent.prototype.onReset;
    /** @type {?} */
    NgxMultiselectComponent.prototype.onClear;
    /** @type {?} */
    NgxMultiselectComponent.prototype.onSearchChange;
    /** @type {?} */
    NgxMultiselectComponent.prototype.filterOptions;
    /**
     * @type {?}
     * @private
     */
    NgxMultiselectComponent.prototype._initialValue;
    /** @type {?} */
    NgxMultiselectComponent.prototype.onChange;
    /** @type {?} */
    NgxMultiselectComponent.prototype.onTouched;
    /** @type {?} */
    NgxMultiselectComponent.prototype.filterOptionsList;
    /**
     * @type {?}
     * @private
     */
    NgxMultiselectComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    NgxMultiselectComponent.prototype.multiselectService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlzZWxlY3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9wYW5rYWpwYXJrYXIvRG9jdW1lbnRzL0dpdEh1Yi9tdWx0aXNlbGVjdC9wcm9qZWN0cy9tdWx0aXNlbGVjdC9zcmMvIiwic291cmNlcyI6WyJsaWIvbXVsdGlzZWxlY3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsdUJBQXVCLEVBQ3ZCLFVBQVUsRUFDVixZQUFZLEVBQ1osV0FBVyxFQUNYLE1BQU0sRUFDTixZQUFZLEVBQ1osU0FBUyxFQUNULFdBQVcsRUFDWCxZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXpFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7O0FBRW5GLE1BQU0sT0FBTyxzQkFBc0IsR0FBUTtJQUN6QyxPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFdBQVcsRUFBRSxVQUFVOzs7SUFBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBQztJQUN0RCxLQUFLLEVBQUUsSUFBSTtDQUNaO0FBU0QsTUFBTSxPQUFPLHVCQUF1Qjs7Ozs7SUFDbEMsWUFDVSxVQUFzQixFQUN0QixrQkFBeUM7UUFEekMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXVCO1FBSzNDLFdBQU0sR0FBVyxVQUFVLENBQUM7UUFFNUIsWUFBTyxHQUFZLEtBQUssQ0FBQztRQUN6QiwwQkFBcUIsR0FBVSxFQUFFLENBQUM7O1FBRzFDLHFCQUFnQixHQUFnQixJQUFJLENBQUM7UUFDckMsd0JBQW1CLEdBQUc7WUFDcEIsRUFBRSxFQUFFLElBQUk7WUFDUixJQUFJLEVBQUUsTUFBTTtZQUNaLFFBQVEsRUFBRSxVQUFVO1NBQ3JCLENBQUM7UUFDRiw4QkFBeUIsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUduQyxtQkFBYyxHQUFZLElBQUksQ0FBQztRQUNoQyxrQkFBYSxHQUFZLEtBQUssQ0FBQzs7UUFHM0QsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUMxQixVQUFLLEdBQVcsTUFBTSxDQUFDO1FBRXZCLHVCQUFrQixHQUFZLElBQUksQ0FBQztRQUNuQyxxQkFBZ0IsR0FBWSxJQUFJLENBQUM7UUFDakMsa0JBQWEsR0FBVyxDQUFDLENBQUM7O1FBK0R6QixXQUFNLEdBQXNCLElBQUksWUFBWSxFQUFRLENBQUM7UUFDckQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBUSxDQUFDO1FBQ3RELGdCQUFXLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFDekQscUJBQWdCLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFDOUQsZ0JBQVcsR0FBc0IsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUMxRCxpQkFBWSxHQUFzQixJQUFJLFlBQVksRUFBUSxDQUFDO1FBQzNELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUN0RCxZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFRLENBQUM7UUFDdEQsbUJBQWMsR0FBc0IsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQXNDekUsYUFBUTs7OztRQUFHLENBQUMsQ0FBTSxFQUFFLEVBQUUsR0FBRSxDQUFDLEVBQUM7UUFDMUIsY0FBUzs7O1FBQUcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxFQUFDO1FBZ0RyQixzQkFBaUI7Ozs7UUFBRyxDQUFDLEdBQVcsRUFBRSxFQUFFOztrQkFDNUIsV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUU7O2dCQUNyQyxNQUFNLEdBQUcsV0FBVztZQUN4QixJQUFJLEdBQUcsRUFBRTtnQkFDUCxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU07Ozs7Z0JBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUM7YUFDcEc7WUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNqRCxDQUFDLEVBQUM7SUFsTUUsQ0FBQzs7OztJQThCTCxJQUNJLGVBQWU7UUFDakIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDL0IsQ0FBQzs7Ozs7SUFDRCxJQUFJLGVBQWUsQ0FBQyxRQUFRO1FBQzFCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxRQUFRLENBQUM7SUFDbkMsQ0FBQzs7OztJQUNELElBQ1csS0FBSztRQUNkLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDOzs7OztJQUNELElBQVcsS0FBSyxDQUFDLEdBQVc7UUFDMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7UUFDbEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxHQUFHLEtBQUssVUFBVSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxLQUFLLFdBQVcsQ0FBQztJQUMzQyxDQUFDOzs7Ozs7SUFHRCxJQUFhLE1BQU0sQ0FBQyxLQUFLO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLDBEQUEwRDtRQUMxRCxJQUFJLEtBQUssRUFBRTtZQUNULHNDQUFzQztZQUN0QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2pCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDcEI7YUFBTTtZQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDckI7SUFDSCxDQUFDOzs7O0lBQ0QsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBQ0QsSUFBYSxXQUFXLENBQUMsR0FBRztRQUMxQixJQUFJLENBQUMsbUJBQW1CLG1DQUFRLElBQUksQ0FBQyxtQkFBbUIsR0FBSyxHQUFHLENBQUUsQ0FBQztJQUNyRSxDQUFDOzs7O0lBQ0QsSUFDSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7Ozs7O0lBQ0QsSUFBSSxRQUFRLENBQUMsS0FBYztRQUN6QixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUN6QixDQUFDOzs7OztJQUVELElBQ0ksT0FBTyxDQUFDLFVBQVU7UUFDcEIsSUFBSSxDQUFDLFVBQVU7WUFBRSxPQUFPO1FBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLHFCQUFxQixDQUMvRCxVQUFVLEVBQ1YsSUFBSSxDQUFDLG1CQUFtQixFQUN4QixJQUFJLENBQUMsZUFBZSxDQUNyQixDQUFDOztjQUNJLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFO1FBQ3JDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekIseUNBQXlDO1FBQ3pDLGdFQUFnRTtRQUNoRSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUFFLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0lBQ2hFLENBQUM7Ozs7OztJQWdCRCxZQUFZLENBQUMsSUFBSTtRQUNmLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7Ozs7SUFHRCxZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDMUMsQ0FBQzs7Ozs7Ozs7OztJQVFELHVCQUF1Qjs7Y0FDZixTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRTtRQUNyQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckMsQ0FBQzs7Ozs7SUFHRCxrQkFBa0I7UUFDaEIsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDO0lBQzNDLENBQUM7Ozs7O0lBR0QsSUFBSSxZQUFZLENBQUMsS0FBVTtRQUN6QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztJQUM3QixDQUFDOzs7O0lBQ0QsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBS0QsVUFBVSxDQUFDLEtBQUs7UUFDZCwrQ0FBK0M7UUFDL0MsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztZQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDMUUsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3RDO0lBQ0gsQ0FBQzs7Ozs7O0lBQ08sd0JBQXdCLENBQUMsS0FBSzs7WUFDaEMsT0FBTyxHQUFHLEtBQUs7UUFDbkIsb0NBQW9DO1FBQ3BDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLHlCQUF5QjtZQUFFLE9BQU87O2NBQ3JGLGtCQUFrQixHQUFRLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDO1FBQzlGLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixPQUFPLENBQUMsT0FBTzs7OztZQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNsQixDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDaEMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEMsQ0FBQyxFQUFDLENBQUM7U0FDSjthQUFNO1lBQ0wsS0FBSyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEMsS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUMsT0FBTyxHQUFHLEtBQUssQ0FBQztTQUNqQjtJQUNILENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsRUFBdUI7UUFDdEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCxpQkFBaUIsQ0FBQyxFQUFhO1FBQzdCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7OztJQUdELFVBQVUsQ0FBQyxPQUFPO1FBQ2hCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCxVQUFVO1FBQ1IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDakQsQ0FBQzs7OztJQUVELGNBQWM7UUFDWixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN6RCxDQUFDOzs7O0lBWUQsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUIsSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLEdBQVc7UUFDdEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQzs7Ozs7O0lBRUQsVUFBVSxDQUFDLFVBQVUsRUFBRSxJQUFJO1FBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDOztjQUNkLEtBQUssR0FBRyxVQUFVLENBQUMsU0FBUzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsRUFBRSxFQUFDO1FBQ3pELFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7Ozs7SUFFRCxjQUFjO1FBQ1osSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxRQUFhOztZQUMxQixXQUFXLEdBQUcsRUFBRTtRQUNwQixXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzVCLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUc7Ozs7WUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQSxDQUFDO1lBQ2hDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsVUFBVSxDQUNiLElBQUksQ0FBQyxVQUFVLEVBQUU7YUFDZCxHQUFHOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQ0FDSCxDQUFDLEtBQ0osTUFBTSxFQUFFLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUN4QyxFQUNILENBQ0YsQ0FBQztRQUNKLDZDQUE2QztRQUM3QyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLE1BQU07O1lBQ1AsZUFBZTtRQUNuQixNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUMvQiw2QkFBNkI7UUFDN0IsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLGVBQWUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7O2dCQUN6QyxXQUFXLEdBQUcsZUFBZSxDQUFDLEdBQUc7Ozs7WUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUM7WUFDaEQsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDekMsb0RBQW9EO2dCQUNwRCxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzlCO2lCQUFNO2dCQUNMLGdEQUFnRDtnQkFDaEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDMUM7WUFDRCxXQUFXLEdBQUcsZUFBZSxDQUFDLEdBQUc7Ozs7WUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQztTQUM5QzthQUFNOzs7Z0JBRUQsR0FBRyxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUMsRUFBRTs7Z0JBQ3pCLGNBQWMsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFO2lCQUNuQyxHQUFHOzs7O1lBQ0YsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQ0FDQSxDQUFDLEtBQ0osTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUNuQixFQUNIO1lBQ0gsZUFBZSxHQUFHLGNBQWMsQ0FBQyxJQUFJOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDZDtRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVELFNBQVM7O1lBQ0gsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRTthQUN2QyxHQUFHOzs7O1FBQ0YsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQ0FDQSxDQUFDLEtBQ0osTUFBTSxFQUFFLElBQUksSUFDWixFQUNIO1FBQ0gsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCxVQUFVOztjQUNGLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsaUNBQ3RDLENBQUMsS0FDSixNQUFNLEVBQUUsS0FBSyxJQUNiLEVBQUM7UUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7O0lBRUQsWUFBWTtRQUNWLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLEVBQUUsYUFBYSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDL0csQ0FBQzs7Ozs7O0lBR0QsV0FBVyxDQUFDLEtBQVU7Y0FDZCxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxLQUFLOztjQUMxQixPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRTs7WUFDN0IsY0FBYyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7O1lBQzNDLFdBQVcsR0FBRyxjQUFjLENBQUMsR0FBRzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQzs7Y0FDekMsaUJBQWlCLEdBQUcsTUFBTSxDQUFDLEdBQUc7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUM7UUFDL0MseUJBQXlCO1FBQ3pCLCtCQUErQjtRQUMvQixjQUFjLEdBQUcsTUFBTTtZQUNyQixDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDL0IsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUM7UUFDdkUsMEJBQTBCO1FBQzFCLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxHQUFHOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQztRQUN0RixvQ0FBb0M7UUFDcEMsY0FBYyxHQUFHLE9BQU8sQ0FBQyxNQUFNOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDOzs7O0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QixDQUFDOzs7Ozs7SUFHRCxXQUFXLENBQUMsUUFBUTtRQUNsQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxRQUFRLEVBQUU7WUFDdEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztZQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxLQUFLLENBQUMsS0FBSzs7WUFDTCxjQUFjLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUc7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGlDQUFLLENBQUMsS0FBRSxNQUFNLEVBQUUsS0FBSyxJQUFFLEVBQUM7UUFDeEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNoQyx1Q0FBdUM7UUFDdkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNiLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7OztJQUVELGdCQUFnQixDQUFDLFVBQW1CO1FBQ2xDLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sNkRBQTZEO1FBQzdELElBQUksT0FBTyxJQUFJLENBQUMsU0FBUyxLQUFLLFdBQVcsRUFBRTtZQUN6QyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztTQUN0QjtJQUNILENBQUM7Ozs7Ozs7SUFLRCxZQUFZLENBQUMsS0FBSztRQUNoQixJQUNFLElBQUksQ0FBQyxNQUFNO1lBQ1gsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEtBQUssS0FBSztZQUN2QyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDLEVBQzFEO1lBQ0EsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7SUFDSCxDQUFDOzs7WUF2WEYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLDhoRUFBMkM7Z0JBRTNDLFNBQVMsRUFBRSxDQUFDLHNCQUFzQixDQUFDO2dCQUNuQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7YUFDaEQ7Ozs7WUEzQkMsVUFBVTtZQVdILHFCQUFxQjs7OzZCQXdDM0IsV0FBVyxTQUFDLHVCQUF1Qjs0QkFDbkMsV0FBVyxTQUFDLHNCQUFzQjt1QkFHbEMsS0FBSztvQkFDTCxLQUFLOzhCQUNMLEtBQUs7aUNBQ0wsS0FBSzsrQkFDTCxLQUFLOzRCQUNMLEtBQUs7K0JBQ0wsWUFBWSxTQUFDLFdBQVc7OEJBQ3hCLEtBQUs7b0JBT0wsS0FBSztxQkFXTCxLQUFLOzBCQWVMLEtBQUs7dUJBR0wsS0FBSztzQkFTTCxLQUFLO3FCQWdCTCxNQUFNO3NCQUNOLE1BQU07MEJBQ04sTUFBTTsrQkFDTixNQUFNOzBCQUNOLE1BQU07MkJBQ04sTUFBTTtzQkFDTixNQUFNO3NCQUNOLE1BQU07NkJBQ04sTUFBTTs0QkFFTixTQUFTLFNBQUMsZUFBZSxFQUFFLEVBQUUsSUFBSSxFQUFFLHNCQUFzQixFQUFFOzJCQThQM0QsWUFBWSxTQUFDLGdCQUFnQixFQUFFLENBQUMsZUFBZSxDQUFDOzs7Ozs7O0lBaFdqRCw0Q0FBa0I7Ozs7O0lBQ2xCLHlDQUFvQzs7Ozs7SUFDcEMsK0NBQXFCOzs7OztJQUNyQiwwQ0FBaUM7Ozs7O0lBQ2pDLHdEQUEwQzs7SUFHMUMsbURBQXFDOztJQUNyQyxzREFJRTs7SUFDRiw0REFBeUU7O0lBQ3pFLDJDQUFTOztJQUVULGlEQUFxRTs7SUFDckUsZ0RBQW9FOztJQUdwRSwyQ0FBbUM7O0lBQ25DLHdDQUFnQzs7SUFDaEMsa0RBQWlDOztJQUNqQyxxREFBNEM7O0lBQzVDLG1EQUEwQzs7SUFDMUMsZ0RBQW1DOztJQUNuQyxtREFBOEQ7O0lBOEQ5RCx5Q0FBK0Q7O0lBQy9ELDBDQUFnRTs7SUFDaEUsOENBQW1FOztJQUNuRSxtREFBd0U7O0lBQ3hFLDhDQUFvRTs7SUFDcEUsK0NBQXFFOztJQUNyRSwwQ0FBZ0U7O0lBQ2hFLDBDQUFnRTs7SUFDaEUsaURBQXlFOztJQUV6RSxnREFBNEU7Ozs7O0lBNEI1RSxnREFBMkI7O0lBUTNCLDJDQUEwQjs7SUFDMUIsNENBQXFCOztJQWdEckIsb0RBUUU7Ozs7O0lBcE1BLDZDQUE4Qjs7Ozs7SUFDOUIscURBQWlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIEVsZW1lbnRSZWYsXG4gIENvbnRlbnRDaGlsZCxcbiAgVGVtcGxhdGVSZWYsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBWaWV3Q2hpbGQsXG4gIEhvc3RCaW5kaW5nLFxuICBIb3N0TGlzdGVuZXJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IE5neE11bHRpc2VsZWN0U2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvbXVsdGlzZWxlY3Quc2VydmljZSc7XG5pbXBvcnQgeyBmb3J3YXJkUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGaWx0ZXJPcHRpb25zQ29tcG9uZW50IH0gZnJvbSAnLi9maWx0ZXItb3B0aW9ucy9maWx0ZXItb3B0aW9ucy5jb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9WQUxVRV9BQ0NFU1NPUjogYW55ID0ge1xuICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTmd4TXVsdGlzZWxlY3RDb21wb25lbnQpLFxuICBtdWx0aTogdHJ1ZVxufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LW11bHRpc2VsZWN0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL211bHRpc2VsZWN0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbXVsdGlzZWxlY3QuY29tcG9uZW50LmNzcyddLFxuICBwcm92aWRlcnM6IFtERUZBVUxUX1ZBTFVFX0FDQ0VTU09SXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgTmd4TXVsdGlzZWxlY3RDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIG11bHRpc2VsZWN0U2VydmljZTogTmd4TXVsdGlzZWxlY3RTZXJ2aWNlXG4gICkgeyB9XG5cbiAgLy8gcHJpdmF0ZSB2YXJpYWJsZXNcbiAgcHJpdmF0ZSBfbXVsdGlwbGU7XG4gIHByaXZhdGUgX3RoZW1lOiBzdHJpbmcgPSAnbWF0ZXJpYWwnO1xuICBwcml2YXRlIF9vcHRpb25zQ29weTtcbiAgcHJpdmF0ZSBfaXNPcGVuOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgb3BlcmF0aW9uUGVuZGluZ1F1ZXVlOiBhbnlbXSA9IFtdO1xuXG4gIC8vIHB1YmxpYyB2YXJpYWJsZXNcbiAgX3NlbGVjdGVkT3B0aW9uczogYW55IHwgYW55W10gPSBudWxsO1xuICBfZGVmYXVsdFByb3BlcnR5TWFwID0ge1xuICAgIGlkOiAnaWQnLFxuICAgIG5hbWU6ICduYW1lJyxcbiAgICBkaXNhYmxlZDogJ2Rpc2FibGVkJ1xuICB9O1xuICBfZGVmYXVsdFByb3BlcnR5TWFwTGVuZ3RoID0gT2JqZWN0LmtleXModGhpcy5fZGVmYXVsdFByb3BlcnR5TWFwKS5sZW5ndGg7XG4gIF9vcHRpb25zO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MubWF0LW11bHRpc2VsZWN0JykgbWF0TXVsdGlzZWxlY3Q6IGJvb2xlYW4gPSB0cnVlO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmJzLW11bHRpc2VsZWN0JykgYnNNdWx0aXNlbGVjdDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8vIElucHV0IGJpbmRpbmdzXG4gIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIGNvbG9yOiBzdHJpbmcgPSAnYmx1ZSc7XG4gIEBJbnB1dCgpIGdyb3VwZWRQcm9wZXJ0eTogc3RyaW5nO1xuICBASW5wdXQoKSBzaG93SGVscGVyRWxlbWVudHM6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKSBzaG93U2VhcmNoRmlsdGVyOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgc2hvd01heExhYmVsczogbnVtYmVyID0gMztcbiAgQENvbnRlbnRDaGlsZChUZW1wbGF0ZVJlZikgX29wdGlvbnNUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgQElucHV0KClcbiAgZ2V0IG9wdGlvbnNUZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9uc1RlbXBsYXRlO1xuICB9XG4gIHNldCBvcHRpb25zVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICB0aGlzLl9vcHRpb25zVGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgfVxuICBASW5wdXQoKVxuICBwdWJsaWMgZ2V0IHRoZW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3RoZW1lO1xuICB9XG4gIHB1YmxpYyBzZXQgdGhlbWUodmFsOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90aGVtZSA9IHZhbDtcbiAgICB0aGlzLm1hdE11bHRpc2VsZWN0ID0gdmFsID09PSAnbWF0ZXJpYWwnO1xuICAgIHRoaXMuYnNNdWx0aXNlbGVjdCA9IHZhbCA9PT0gJ2Jvb3RzdHJhcCc7XG4gIH1cblxuICAvLyBJbnB1dCBiaW5kaW5nIHdpdGggZ2V0dGVyIC8gc2V0dGVyXG4gIEBJbnB1dCgpIHNldCBpc09wZW4odmFsdWUpIHtcbiAgICB0aGlzLl9pc09wZW4gPSB2YWx1ZTtcbiAgICAvLyBvbk9wZW4gYW5kIG9uQ2xvc2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBieSBpc09wZW4gc2V0dGVyXG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICAvLyBsaXN0IHBvcHVsYXRlLCBiYXNlZCBvbiBlbXB0eSB2YWx1ZVxuICAgICAgdGhpcy5maWx0ZXJPcHRpb25zTGlzdCgnJyk7XG4gICAgICB0aGlzLm9uVG91Y2hlZCgpO1xuICAgICAgdGhpcy5vbk9wZW4uZW1pdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uQ2xvc2UuZW1pdCgpO1xuICAgIH1cbiAgfVxuICBnZXQgaXNPcGVuKCkge1xuICAgIHJldHVybiB0aGlzLl9pc09wZW47XG4gIH1cbiAgQElucHV0KCkgc2V0IHByb3BlcnR5TWFwKHZhbCkge1xuICAgIHRoaXMuX2RlZmF1bHRQcm9wZXJ0eU1hcCA9IHsgLi4udGhpcy5fZGVmYXVsdFByb3BlcnR5TWFwLCAuLi52YWwgfTtcbiAgfVxuICBASW5wdXQoKVxuICBnZXQgbXVsdGlwbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX211bHRpcGxlO1xuICB9XG4gIHNldCBtdWx0aXBsZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMudmlld1RvTW9kZWwodmFsdWUgPyBbXTogbnVsbCk7XG4gICAgdGhpcy5fbXVsdGlwbGUgPSB2YWx1ZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBvcHRpb25zKGNvbGxlY3Rpb24pIHtcbiAgICBpZiAoIWNvbGxlY3Rpb24pIHJldHVybjtcbiAgICB0aGlzLl9vcHRpb25zQ29weSA9IHRoaXMubXVsdGlzZWxlY3RTZXJ2aWNlLm1hcERhdGFzb3VyY2VUb0ZpZWxkcyhcbiAgICAgIGNvbGxlY3Rpb24sXG4gICAgICB0aGlzLl9kZWZhdWx0UHJvcGVydHlNYXAsXG4gICAgICB0aGlzLmdyb3VwZWRQcm9wZXJ0eVxuICAgICk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9uc0NvcHkoKTtcbiAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgLy8gU29tZXRpbWVzIGJpbmRpbmcgY2FuIGhhcHBlbnMgbGF6aWx5LCBcbiAgICAvLyBzbyBgZmluaXNoUGVuZGluZ09wZXJhdGlvbnNgIGhlbHBzIHRvIGV4ZWN1dGUgc3VjaCBvcGVyYXRpb25zXG4gICAgaWYgKHRoaXMuaXNPcGVyYXRpb25QZW5kaW5nKCkpIHRoaXMuZmluaXNoUGVuZGluZ09wZXJhdGlvbnMoKTtcbiAgfVxuXG4gIC8vIE91dHB1dCBiaW5kaW5nc1xuICBAT3V0cHV0KCkgb25PcGVuOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIG9uQ2xvc2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgb25JdGVtQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBPdXRwdXQoKSBvbkdyb3VwSXRlbUNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgb25TZWxlY3RBbGw6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgb25TZWxlY3ROb25lOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIG9uUmVzZXQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgb25DbGVhcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSBvblNlYXJjaENoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICBAVmlld0NoaWxkKCdmaWx0ZXJPcHRpb25zJywgeyByZWFkOiBGaWx0ZXJPcHRpb25zQ29tcG9uZW50IH0pIGZpbHRlck9wdGlvbnM7XG5cbiAgLy8gQWRkaW5nIHBlbmRpbmcgb3BlcmF0aW9uIGluIHF1ZXVlXG4gIGFkZE9wZXJhdGlvbihpdGVtKSB7XG4gICAgdGhpcy5vcGVyYXRpb25QZW5kaW5nUXVldWUucHVzaChpdGVtKTtcbiAgfVxuXG4gIC8vIFBvcGluZyBwZW5kaW5nIG9wZXJhdGlvbiBmcm9tIHF1ZXVlIHNlcXVlbnRpYWxseVxuICBwb3BPcGVyYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub3BlcmF0aW9uUGVuZGluZ1F1ZXVlLnBvcCgpO1xuICB9XG5cbiAgLyogXG4gICAgSW4gZnV0dXJlIHRoaXMgY29kZSBpcyBnb2luZyB0byByZXNpZGVzIGluc2lkZSBkaWZmZXJlbnQgU2VydmljZSxcbiAgICBUaGlzIHBlbmRpbmdPcGVyYXRpb24gZmVhdHVyZSBpcyBmaW5lIGdyYWluZWQgaW4gZnV0dXJlLCBcbiAgICBhbmQgY2FuIGJlIHVzZWQgZm9yIG11bHRpcGxlIHB1cnBvc2UgbGlrZSBtb2RlbCB1cGRhdGUsIGNvbGxlY3Rpb24gdXBkYXRlLCBldGMuXG4gICovXG4gIC8vIEV4dHJhY3RpbmcgYW5kIGZpbmlzaGluZyBhbGwgcGVuZGluZyBvcGVyYXRpb25cbiAgZmluaXNoUGVuZGluZ09wZXJhdGlvbnMoKSB7XG4gICAgY29uc3Qgb3BlcmF0aW9uID0gdGhpcy5wb3BPcGVyYXRpb24oKTtcbiAgICB0aGlzLnByZXBvcHVsYXRlT3B0aW9ucyhvcGVyYXRpb24pO1xuICB9XG5cbiAgLy8gQ2hlY2sgcGVuZGluZyBvcGVyYXRpb24gcXVldWUgc3RhdHVzXG4gIGlzT3BlcmF0aW9uUGVuZGluZygpIHtcbiAgICByZXR1cm4gdGhpcy5vcGVyYXRpb25QZW5kaW5nUXVldWUubGVuZ3RoO1xuICB9XG5cbiAgcHJpdmF0ZSBfaW5pdGlhbFZhbHVlOiBhbnk7XG4gIHNldCBpbml0aWFsVmFsdWUodmFsdWU6IGFueSkge1xuICAgIHRoaXMuX2luaXRpYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIGdldCBpbml0aWFsVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2luaXRpYWxWYWx1ZTtcbiAgfVxuXG4gIG9uQ2hhbmdlID0gKF86IGFueSkgPT4ge307XG4gIG9uVG91Y2hlZCA9ICgpID0+IHt9O1xuXG4gIHdyaXRlVmFsdWUodmFsdWUpIHtcbiAgICAvLyBTZXQgc2VsZWN0ZWQgdmFsdWUgZm9yIGluaXRpYWwgbG9hZCBvZiB2YWx1ZVxuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5pbml0aWFsVmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuX29wdGlvbnMgPyB0aGlzLnByZXBvcHVsYXRlT3B0aW9ucyh2YWx1ZSkgOiB0aGlzLmFkZE9wZXJhdGlvbih2YWx1ZSk7XG4gICAgICB0aGlzLmZvcm1hdFByZXBvcHVsYXRlZFZhbHVlcyh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHByaXZhdGUgZm9ybWF0UHJlcG9wdWxhdGVkVmFsdWVzKHZhbHVlKTogYW55IHtcbiAgICBsZXQgb3B0aW9ucyA9IHZhbHVlO1xuICAgIC8vIFRPRE86IGNhbiB3ZSBpbXByb3ZlIGJlbG93IGxvZ2ljP1xuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9kZWZhdWx0UHJvcGVydHlNYXApLmxlbmd0aCA9PSB0aGlzLl9kZWZhdWx0UHJvcGVydHlNYXBMZW5ndGgpIHJldHVybjtcbiAgICBjb25zdCBzd2FwcGVkUHJvcGVydHlNYXA6IGFueSA9IHRoaXMubXVsdGlzZWxlY3RTZXJ2aWNlLm1pcnJvck9iamVjdCh0aGlzLl9kZWZhdWx0UHJvcGVydHlNYXApO1xuICAgIGlmICh0aGlzLm11bHRpcGxlKSB7XG4gICAgICBvcHRpb25zLmZvckVhY2gobyA9PiB7XG4gICAgICAgIG8uaWQgPSBvW3N3YXBwZWRQcm9wZXJ0eU1hcC5pZF07XG4gICAgICAgIG8ubmFtZSA9IG9bc3dhcHBlZFByb3BlcnR5TWFwLm5hbWVdO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlLmlkID0gdmFsdWVbc3dhcHBlZFByb3BlcnR5TWFwLmlkXTtcbiAgICAgIHZhbHVlLm5hbWUgPSB2YWx1ZVtzd2FwcGVkUHJvcGVydHlNYXAubmFtZV07XG4gICAgICBvcHRpb25zID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBhbnkpID0+IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICB9XG5cbiAgLy8gQWxsIHVwZGF0ZSB0byBvcHRpb25zIHNob3VsZCBoYXBwZW4gZnJvbSBiZWxvdyBtZXRob2QuXG4gIHNldE9wdGlvbnMob3B0aW9ucykge1xuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgZ2V0T3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9ucyA/IFsuLi50aGlzLl9vcHRpb25zXSA6IFtdO1xuICB9XG5cbiAgZ2V0T3B0aW9uc0NvcHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnNDb3B5ID8gWy4uLnRoaXMuX29wdGlvbnNDb3B5XSA6IFtdO1xuICB9XG5cbiAgZmlsdGVyT3B0aW9uc0xpc3QgPSAodmFsOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBvcHRpb25zQ29weSA9IHRoaXMuZ2V0T3B0aW9uc0NvcHkoKTtcbiAgICBsZXQgcmVzdWx0ID0gb3B0aW9uc0NvcHk7XG4gICAgaWYgKHZhbCkge1xuICAgICAgcmVzdWx0ID0gb3B0aW9uc0NvcHkuZmlsdGVyKGkgPT4gaS5uYW1lICYmIGkubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodmFsLnRvTG93ZXJDYXNlKCkpICE9PSAtMSk7XG4gICAgfVxuICAgIHRoaXMuc2V0T3B0aW9ucyhyZXN1bHQpO1xuICAgIHRoaXMucHJlcG9wdWxhdGVPcHRpb25zKHRoaXMuX3NlbGVjdGVkT3B0aW9ucyk7XG4gIH07XG5cbiAgaXNWYWx1ZVNlbGVjdGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZE9wdGlvbnMgJiYgdGhpcy5fbXVsdGlwbGUgPyBcbiAgICAgIHRoaXMuX3NlbGVjdGVkT3B0aW9ucy5sZW5ndGggOlxuICAgICAgdGhpcy5fc2VsZWN0ZWRPcHRpb25zO1xuICB9XG5cbiAgc2VhcmNoQ2hhbmdlKHZhbDogc3RyaW5nKSB7XG4gICAgdGhpcy5maWx0ZXJPcHRpb25zTGlzdCh2YWwpO1xuICAgIHRoaXMub25TZWFyY2hDaGFuZ2UuZW1pdCh2YWwpO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcbiAgfVxuXG4gIHJlbW92ZUl0ZW0oY29sbGVjdGlvbiwgaXRlbSkge1xuICAgIGl0ZW0udGlja2VkID0gZmFsc2U7XG4gICAgY29uc3QgaW5kZXggPSBjb2xsZWN0aW9uLmZpbmRJbmRleChvID0+IG8uaWQgPT09IGl0ZW0uaWQpO1xuICAgIGNvbGxlY3Rpb24uc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuXG4gIHRvZ2dsZURyb3Bkb3duKCkge1xuICAgIHRoaXMuaXNPcGVuID0gIXRoaXMuaXNPcGVuO1xuICB9XG5cbiAgcHJlcG9wdWxhdGVPcHRpb25zKHNlbGVjdGVkOiBhbnkpIHtcbiAgICBsZXQgc2VsZWN0ZWRJZHMgPSBbXTtcbiAgICBzZWxlY3RlZElkcyA9IHRoaXMuX211bHRpcGxlID8gXG4gICAgICAoc2VsZWN0ZWQgfHwgW10pLm1hcChpID0+IGkuaWQpOlxuICAgICAgc2VsZWN0ZWQgPyBbc2VsZWN0ZWQuaWRdOiBbXTtcbiAgICB0aGlzLnNldE9wdGlvbnMoXG4gICAgICB0aGlzLmdldE9wdGlvbnMoKVxuICAgICAgICAubWFwKG8gPT4gKHsgXG4gICAgICAgICAgICAuLi5vLCBcbiAgICAgICAgICAgIHRpY2tlZDogc2VsZWN0ZWRJZHMuaW5kZXhPZihvLmlkKSAhPT0gLTEgXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAvLyBUT0RPOiBkbyB3ZSByZWFsbHkgbmVlZCB0aGlzIHJlYXNzaWdubWVudD9cbiAgICB0aGlzLnZpZXdUb01vZGVsKHNlbGVjdGVkKTtcbiAgfVxuXG4gIHNlbGVjdChvcHRpb24pIHtcbiAgICBsZXQgc2VsZWN0ZWRPcHRpb25zO1xuICAgIG9wdGlvbi50aWNrZWQgPSAhb3B0aW9uLnRpY2tlZDtcbiAgICAvLyBUT0RPOiBSZWZhY3RvciBiZWxvdyBsb2dpY1xuICAgIGlmICh0aGlzLl9tdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWRPcHRpb25zID0gWy4uLnRoaXMuX3NlbGVjdGVkT3B0aW9uc107XG4gICAgICBsZXQgc2VsZWN0ZWRJZHMgPSBzZWxlY3RlZE9wdGlvbnMubWFwKGkgPT4gaS5pZCk7XG4gICAgICBpZiAoc2VsZWN0ZWRJZHMuaW5kZXhPZihvcHRpb24uaWQpID09PSAtMSkge1xuICAgICAgICAvLyBpZiBzZWxlY3RlZCBpdGVtIG5vdCBleGlzdCBpbiBjb2xsZWN0aW9uLCBwdXNoIGl0XG4gICAgICAgIHNlbGVjdGVkT3B0aW9ucy5wdXNoKG9wdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiBzZWxlY3RlZCBpdGVtIGV4aXN0IGluIGNvbGxlY3Rpb24sIHBvc3QgaXRcbiAgICAgICAgdGhpcy5yZW1vdmVJdGVtKHNlbGVjdGVkT3B0aW9ucywgb3B0aW9uKTtcbiAgICAgIH1cbiAgICAgIHNlbGVjdGVkSWRzID0gc2VsZWN0ZWRPcHRpb25zLm1hcChpID0+IGkuaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPOiBmaW5kIG9wdGltaXplZCB3YXkgdG8gZG8gYmVsb3dcbiAgICAgIGxldCB2YWwgPSBvcHRpb24gJiYgb3B0aW9uLmlkO1xuICAgICAgbGV0IGNoYW5nZWRPcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKClcbiAgICAgICAgLm1hcChcbiAgICAgICAgICBvID0+ICh7IFxuICAgICAgICAgICAgLi4ubyxcbiAgICAgICAgICAgIHRpY2tlZDogby5pZCA9PSB2YWwgXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIHNlbGVjdGVkT3B0aW9ucyA9IGNoYW5nZWRPcHRpb25zLmZpbmQoaSA9PiBpLnRpY2tlZCk7XG4gICAgICB0aGlzLnNldE9wdGlvbnMoY2hhbmdlZE9wdGlvbnMpO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgICB0aGlzLnZpZXdUb01vZGVsKHNlbGVjdGVkT3B0aW9ucyk7XG4gICAgdGhpcy5vbkl0ZW1DbGljay5lbWl0KG9wdGlvbik7XG4gIH1cblxuICBzZWxlY3RBbGwoKSB7XG4gICAgbGV0IGFsbFNlbGVjdGVkT3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpXG4gICAgICAubWFwKFxuICAgICAgICBvID0+ICh7XG4gICAgICAgICAgLi4ubyxcbiAgICAgICAgICB0aWNrZWQ6IHRydWVcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgdGhpcy5zZXRPcHRpb25zKGFsbFNlbGVjdGVkT3B0aW9ucyk7XG4gICAgdGhpcy52aWV3VG9Nb2RlbChhbGxTZWxlY3RlZE9wdGlvbnMpO1xuICAgIHRoaXMub25TZWxlY3RBbGwuZW1pdCgpO1xuICB9XG5cbiAgc2VsZWN0Tm9uZSgpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCkubWFwKG8gPT4gKHtcbiAgICAgIC4uLm8sXG4gICAgICB0aWNrZWQ6IGZhbHNlXG4gICAgfSkpXG4gICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgIHRoaXMudmlld1RvTW9kZWwoW10pO1xuICAgIHRoaXMub25TZWxlY3ROb25lLmVtaXQoKTtcbiAgfVxuXG4gIGJvcmRlckJvdHRvbSgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNPcGVuID8geyBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHt0aGlzLm1hdE11bHRpc2VsZWN0ID8gdGhpcy5jb2xvciA6ICd0cmFuc3BlcmFudCd9YCB9IDoge307XG4gIH1cblxuICAvL1RPRE86IE9wdGltaXplZCBiZWxvdyBsb2dpYywgaXQgY2FuIGJlIGRvbmUgaW4gbGVzc2VyIHN0ZXBzXG4gIHNlbGVjdEdyb3VwKGdyb3VwOiBhbnkpIHtcbiAgICBjb25zdCB7IHRpY2tlZCwgdmFsdWVzIH0gPSBncm91cDtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgbGV0IHNlbGVjdGVkVmFsdWVzID0gWy4uLnRoaXMuX3NlbGVjdGVkT3B0aW9uc107XG4gICAgbGV0IHNlbGVjdGVkSWRzID0gc2VsZWN0ZWRWYWx1ZXMubWFwKHMgPT4gcy5pZCk7XG4gICAgY29uc3QgYWxsR3JvdXBPcHRpb25JZHMgPSB2YWx1ZXMubWFwKHYgPT4gdi5pZCk7XG4gICAgLy8gR2V0IGFsbCB0aWNrZWQgb3B0aW9uc1xuICAgIC8vIGNvbmNhdCB3aXRoIHNlbGVjdGVkIG9wdGlvbnNcbiAgICBzZWxlY3RlZFZhbHVlcyA9IHRpY2tlZFxuICAgICAgPyBzZWxlY3RlZFZhbHVlcy5jb25jYXQodmFsdWVzKVxuICAgICAgOiBzZWxlY3RlZFZhbHVlcy5maWx0ZXIobyA9PiBhbGxHcm91cE9wdGlvbklkcy5pbmRleE9mKG8uaWQpID09PSAtMSk7XG4gICAgLy8gRmluZCB1bmlxdWUgb3V0IG9mIHRoZW1cbiAgICBzZWxlY3RlZElkcyA9IHRoaXMubXVsdGlzZWxlY3RTZXJ2aWNlLmZpbmRVbmlxdWUoc2VsZWN0ZWRWYWx1ZXMubWFwKGl0ZW0gPT4gaXRlbS5pZCkpO1xuICAgIC8vIGJ1aWxkIHNlbGVjdGVkT3B0aW9ucyBhcnJheSBhZ2FpblxuICAgIHNlbGVjdGVkVmFsdWVzID0gb3B0aW9ucy5maWx0ZXIobyA9PiBzZWxlY3RlZElkcy5pbmRleE9mKG8uaWQpICE9PSAtMSk7XG4gICAgdGhpcy52aWV3VG9Nb2RlbChzZWxlY3RlZFZhbHVlcyk7XG4gICAgdGhpcy5vbkdyb3VwSXRlbUNsaWNrLmVtaXQoZ3JvdXApO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy52aWV3VG9Nb2RlbCh0aGlzLmluaXRpYWxWYWx1ZSk7XG4gICAgdGhpcy5wcmVwb3B1bGF0ZU9wdGlvbnModGhpcy5pbml0aWFsVmFsdWUpO1xuICAgIHRoaXMub25SZXNldC5lbWl0KCk7XG4gIH1cblxuICAvLyBSZXNwb25zaWJsZSBmb3IgdXBkYXRpbmcgdmFsdWUgZnJvbSB2aWV3IHRvIG1vZGVsXG4gIHZpZXdUb01vZGVsKHNlbGVjdGVkKSB7XG4gICAgaWYgKHRoaXMuX3NlbGVjdGVkT3B0aW9ucyAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMuX3NlbGVjdGVkT3B0aW9ucyA9IHNlbGVjdGVkO1xuICAgICAgdGhpcy5vbkNoYW5nZShzZWxlY3RlZCk7XG4gICAgfVxuICB9XG5cbiAgY2xlYXIoZXZlbnQpe1xuICAgIGxldCBjaGFuZ2VkT3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpLm1hcChvID0+ICh7Li4ubywgdGlja2VkOiBmYWxzZX0pKTtcbiAgICB0aGlzLnNldE9wdGlvbnMoY2hhbmdlZE9wdGlvbnMpO1xuICAgIC8vIG5vIHZhbHVlIGlzIHNlbGVjdGVkIHNvIHBhc3NpbmcgbnVsbFxuICAgIHRoaXMudmlld1RvTW9kZWwobnVsbCk7XG4gICAgdGhpcy5vbkNsZWFyLmVtaXQoKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgfVxuXG4gIG5nT25Jbml0ICgpIHtcbiAgICAvLyBDaGVjayBpZiB2YWx1ZSBoYXZlIG5vdCBiZWVuIGFzc2lnbmVkIHRoZW4gZGVmYXVsdCB0byB0cnVlXG4gICAgaWYgKHR5cGVvZiB0aGlzLl9tdWx0aXBsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMubXVsdGlwbGUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE86IENvbnNpZGVyIGNyZWF0aW5nIGEgZGlyZWN0aXZlIGZvciB0aGlzLlxuICAvLyBUT0RPOiBBbHNvIGNvbnZlcnQgYmVsb3cgdG8gYmUgd29yayBmb3IgZWxlbWVudCBzcGVjaWZpY1xuICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDpjbGljaycsIFsnJGV2ZW50LnRhcmdldCddKVxuICBjbGlja091dFNpZGUoZXZlbnQpIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmlzT3BlbiAmJlxuICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgIT09IGV2ZW50ICYmXG4gICAgICAhdGhpcy5tdWx0aXNlbGVjdFNlcnZpY2UuY2xvc2VzdChldmVudCwgJ25neC1tdWx0aXNlbGVjdCcpXG4gICAgKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=