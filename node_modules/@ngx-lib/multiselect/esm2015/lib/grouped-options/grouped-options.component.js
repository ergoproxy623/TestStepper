/**
 * @fileoverview added by tsickle
 * Generated from: lib/grouped-options/grouped-options.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectionStrategy, Output, EventEmitter, TemplateRef, ViewChild } from '@angular/core';
import { NgxMultiselectService } from '../services/multiselect.service';
export class GroupedOptionsComponent {
    /**
     * @param {?} multiselectService
     */
    constructor(multiselectService) {
        this.multiselectService = multiselectService;
        this._options = [];
        this._selectedOptions = [];
        this.groupedOptions = [];
        this.start = 0;
        this.end = 5;
        this.disabled = false;
        this.multiple = false;
        this.selectGroup = new EventEmitter();
        this.selectOption = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectedOptions(value) {
        this._selectedOptions = value;
        this.formGroupOptions(this._options, this._selectedOptions);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set options(value) {
        this._options = value;
        this.formGroupOptions(value, this._selectedOptions);
    }
    /**
     * @return {?}
     */
    get options() {
        return this.groupedOptions;
    }
    // TODO: Refactor below logic
    /**
     * @param {?} collection
     * @param {?} selectedOptions
     * @return {?}
     */
    formGroupOptions(collection, selectedOptions) {
        /** @type {?} */
        let selectedIds = this.multiple ?
            (selectedOptions || []).map((/**
             * @param {?} s
             * @return {?}
             */
            s => s.id)) :
            selectedOptions ? [selectedOptions.id]
                : [];
        /** @type {?} */
        const values = collection.map((/**
         * @param {?} v
         * @return {?}
         */
        v => (Object.assign(Object.assign({}, v), { ticked: !v.isGroup ? selectedIds.indexOf(v.id) !== -1 : v.ticked }))));
        this.groupedOptions = this.multiselectService.virtualOptionsGroupingFlatten(values, this.groupedProperty);
        this.updateRange({ start: this.start, end: this.end });
    }
    /**
     * @param {?} option
     * @return {?}
     */
    getOptionStyle(option) {
        return {
            group: option.isGroup,
            marked: option.ticked,
            disabled: this.disabled || option.disabled
        };
    }
    /**
     * @param {?} _
     * @param {?} option
     * @return {?}
     */
    trackByFn(_, option) {
        return option.id;
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    updateRange({ start, end }) {
        this.start = start;
        this.end = end;
        this.filteredOptions = [...this.options].slice(start, end);
    }
    /**
     * @param {?} option
     * @return {?}
     */
    select(option) {
        if (!option.isGroup) {
            this.selectOption.emit(option);
        }
        else {
            option.ticked = !option.ticked;
            /** @type {?} */
            const values = this.multiselectService.collectAllDescendants(this.options, this.groupedProperty, option.name);
            this.selectGroup.emit(Object.assign(Object.assign({}, option), { values: values }));
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (!this.optionsTemplate) {
            this.optionsTemplate = this.defaultOptionsTemplate;
        }
    }
}
GroupedOptionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'ms-grouped-options',
                template: "<div class=\"options-container\" msVirtualScroll [totalCount]=\"options.length\" (rangeChanged)=\"updateRange($event)\">\n  <div #top class=\"top\"></div>\n  <ng-container *ngIf=\"filteredOptions.length; else noOptions\">\n    <div\n      class=\"option\"\n      [ngStyle]=\"{ marginLeft: option.depth * 15 + 'px' }\"\n      [ngClass]=\"getOptionStyle(option)\"\n      *ngFor=\"let option of filteredOptions; trackBy: trackByFn\"\n      (click)=\"select(option)\"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"\n          optionsTemplate;\n          context: {\n            option: option\n          }\n        \"\n      ></ng-container>\n    </div>\n  </ng-container>\n  <div #bottom class=\"bottom\"></div>\n</div>\n<ng-template #defaultOptionsTemplate let-option=\"option\">\n  {{ option?.name }}\n</ng-template>\n<ng-template #noOptions let-option=\"option\">\n  <div class=\"option message\">\n    No options available.\n  </div>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }] }
];
/** @nocollapse */
GroupedOptionsComponent.ctorParameters = () => [
    { type: NgxMultiselectService }
];
GroupedOptionsComponent.propDecorators = {
    groupedProperty: [{ type: Input }],
    disabled: [{ type: Input }],
    multiple: [{ type: Input }],
    selectedOptions: [{ type: Input }],
    optionsTemplate: [{ type: Input }],
    options: [{ type: Input }],
    selectGroup: [{ type: Output }],
    selectOption: [{ type: Output }],
    defaultOptionsTemplate: [{ type: ViewChild, args: ['defaultOptionsTemplate', { static: true },] }]
};
if (false) {
    /** @type {?} */
    GroupedOptionsComponent.prototype._options;
    /** @type {?} */
    GroupedOptionsComponent.prototype._selectedOptions;
    /** @type {?} */
    GroupedOptionsComponent.prototype.groupedOptions;
    /** @type {?} */
    GroupedOptionsComponent.prototype.start;
    /** @type {?} */
    GroupedOptionsComponent.prototype.end;
    /** @type {?} */
    GroupedOptionsComponent.prototype.filteredOptions;
    /** @type {?} */
    GroupedOptionsComponent.prototype.groupedProperty;
    /** @type {?} */
    GroupedOptionsComponent.prototype.disabled;
    /** @type {?} */
    GroupedOptionsComponent.prototype.multiple;
    /** @type {?} */
    GroupedOptionsComponent.prototype.optionsTemplate;
    /** @type {?} */
    GroupedOptionsComponent.prototype.selectGroup;
    /** @type {?} */
    GroupedOptionsComponent.prototype.selectOption;
    /** @type {?} */
    GroupedOptionsComponent.prototype.defaultOptionsTemplate;
    /** @type {?} */
    GroupedOptionsComponent.prototype.multiselectService;
}
//# sourceMappingURL=data:application/json;base64,