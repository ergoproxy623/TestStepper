/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/multiselect.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/** @type {?} */
const matchSelectors = [
    'matches',
    'webkitMatchesSelector',
    'mozMatchesSelector',
    'msMatchesSelector',
    'oMatchesSelector'
];
export class NgxMultiselectService {
    constructor() { }
    /**
     * @param {?} node
     * @param {?} selector
     * @return {?}
     */
    pseudoClassExist(node, selector) {
        /** @type {?} */
        const nativeMatches = node.matches || node.msMatchesSelector;
        try {
            return nativeMatches.call(node, selector);
        }
        catch (error) {
            return false;
        }
    }
    /**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    closest(el, selector) {
        /** @type {?} */
        let matchesFn;
        // find vendor prefix
        matchSelectors.some((/**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            if (typeof document.body[fn] === 'function') {
                matchesFn = fn;
                return true;
            }
            return false;
        }));
        /** @type {?} */
        let parent;
        // traverse parents
        while (el) {
            parent = el.parentElement;
            if (parent && parent[matchesFn](selector)) {
                return parent;
            }
            el = parent;
        }
        return false;
    }
    // TODO: make this logic to work to find all descendant groups
    /**
     * @param {?} collection
     * @param {?} groupProperty
     * @param {?} groupName
     * @return {?}
     */
    collectAllDescendants(collection, groupProperty, groupName) {
        /** @type {?} */
        const allDescendants = collection.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item[groupProperty] == groupName));
        allDescendants.concat(collection.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.parent == groupName)));
        return allDescendants;
    }
    /**
     * @private
     * @param {?} collection
     * @param {?} groupProperty
     * @param {?} groupName
     * @return {?}
     */
    allDescendantsAreTicked(collection, groupProperty, groupName) {
        /** @type {?} */
        const allDescendants = this.collectAllDescendants(collection, groupProperty, groupName);
        /** @type {?} */
        const allAreTicked = allDescendants.every((/**
         * @param {?} d
         * @return {?}
         */
        d => d.ticked));
        return allAreTicked;
    }
    /**
     * @private
     * @param {?} collection
     * @param {?} groupProperty
     * @param {?} groupName
     * @return {?}
     */
    allDescendantsAreDisabled(collection, groupProperty, groupName) {
        /** @type {?} */
        const allDescendants = this.collectAllDescendants(collection, groupProperty, groupName);
        /** @type {?} */
        const allAreDisabled = allDescendants.every((/**
         * @param {?} d
         * @return {?}
         */
        d => d.disabled));
        return allAreDisabled;
    }
    /**
     * @param {?} options
     * @param {?} groupByProperty
     * @return {?}
     */
    optionsGrouping(options, groupByProperty) {
        /** @type {?} */
        const getAllUniqueGroupByPropertyValue = this.findUnique(options.map((/**
         * @param {?} item
         * @return {?}
         */
        item => item[groupByProperty])));
        /** @type {?} */
        const result = getAllUniqueGroupByPropertyValue.map((/**
         * @param {?} group
         * @return {?}
         */
        group => {
            /** @type {?} */
            const groupedValues = options.filter((/**
             * @param {?} o
             * @return {?}
             */
            o => o[groupByProperty] === group));
            return {
                name: group,
                values: groupedValues,
                ticked: groupedValues.every((/**
                 * @param {?} o
                 * @return {?}
                 */
                o => o.ticked)),
                disabled: groupedValues.every((/**
                 * @param {?} o
                 * @return {?}
                 */
                o => o.disabled))
            };
        }));
        return result;
    }
    /**
     * @param {?} expression
     * @return {?}
     */
    findUnique(expression) {
        return [...Array.from(new Set(expression))];
    }
    /**
     * @param {?} options
     * @param {?} groupByProperty
     * @return {?}
     */
    virtualOptionsGroupingFlatten(options, groupByProperty) {
        /** @type {?} */
        const allParentGroupedValues = this.findUnique(options.filter((/**
         * @param {?} o
         * @return {?}
         */
        o => !o.parent)).map((/**
         * @param {?} item
         * @return {?}
         */
        item => item[groupByProperty])));
        /** @type {?} */
        const subGroupedValues = this.findUnique(options.filter((/**
         * @param {?} o
         * @return {?}
         */
        o => o.parent)).map((/**
         * @param {?} __0
         * @return {?}
         */
        ({ name, parent }) => ({ name, parent }))));
        /** @type {?} */
        let result = [];
        allParentGroupedValues.forEach((/**
         * @param {?} group
         * @return {?}
         */
        group => {
            result.push({
                name: group,
                isGroup: true,
                ticked: this.allDescendantsAreTicked(options, groupByProperty, group),
                disabled: this.allDescendantsAreDisabled(options, groupByProperty, group)
            });
            /** @type {?} */
            const groupedValues = options
                .filter((/**
             * @param {?} o
             * @return {?}
             */
            o => o[groupByProperty] === group && !o.parent))
                .map((/**
             * @param {?} v
             * @return {?}
             */
            v => (Object.assign(Object.assign({}, v), { depth: 1 }))));
            result = [...result].concat(groupedValues);
            /** @type {?} */
            const childGroupedValues = subGroupedValues.filter((/**
             * @param {?} s
             * @return {?}
             */
            (s) => s.parent === group));
            childGroupedValues.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                result.push({ name: c, parent: group, isGroup: true });
                /** @type {?} */
                const values = options.filter((/**
                 * @param {?} o
                 * @return {?}
                 */
                o => o[groupByProperty] === c)).map((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => (Object.assign(Object.assign({}, v), { depth: 2 }))));
                result.concat(values);
            }));
        }));
        return result;
    }
    /**
     * @param {?} json
     * @return {?}
     */
    mirrorObject(json) {
        /** @type {?} */
        const ret = {};
        for (var key in json) {
            ret[json[key]] = key;
        }
        return ret;
    }
    /**
     * @param {?} collection
     * @param {?} propertyMap
     * @param {?=} groupedProperty
     * @return {?}
     */
    mapDatasourceToFields(collection, propertyMap, groupedProperty) {
        /** @type {?} */
        let keys = Object.keys(propertyMap);
        return collection.map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            /** @type {?} */
            let obj = groupedProperty ? { [groupedProperty]: item[groupedProperty] } : {};
            keys.reduce((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                obj[b] = item[propertyMap[b]];
            }), obj);
            return obj;
        }));
    }
}
NgxMultiselectService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgxMultiselectService.ctorParameters = () => [];
/** @nocollapse */ NgxMultiselectService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxMultiselectService_Factory() { return new NgxMultiselectService(); }, token: NgxMultiselectService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlzZWxlY3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcGFua2FqcGFya2FyL0RvY3VtZW50cy9HaXRIdWIvbXVsdGlzZWxlY3QvcHJvamVjdHMvbXVsdGlzZWxlY3Qvc3JjLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL211bHRpc2VsZWN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7TUFFckMsY0FBYyxHQUFHO0lBQ3JCLFNBQVM7SUFDVCx1QkFBdUI7SUFDdkIsb0JBQW9CO0lBQ3BCLG1CQUFtQjtJQUNuQixrQkFBa0I7Q0FDbkI7QUFLRCxNQUFNLE9BQU8scUJBQXFCO0lBQ2hDLGdCQUFlLENBQUM7Ozs7OztJQUVoQixnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsUUFBUTs7Y0FDdkIsYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLGlCQUFpQjtRQUM1RCxJQUFJO1lBQ0YsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztTQUMzQztRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7Ozs7OztJQUVELE9BQU8sQ0FBQyxFQUFFLEVBQUUsUUFBUTs7WUFDZCxTQUFTO1FBQ2IscUJBQXFCO1FBQ3JCLGNBQWMsQ0FBQyxJQUFJOzs7O1FBQUMsVUFBUyxFQUFFO1lBQzdCLElBQUksT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLFVBQVUsRUFBRTtnQkFDM0MsU0FBUyxHQUFHLEVBQUUsQ0FBQztnQkFDZixPQUFPLElBQUksQ0FBQzthQUNiO1lBQ0QsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLEVBQUMsQ0FBQzs7WUFFQyxNQUFNO1FBRVYsbUJBQW1CO1FBQ25CLE9BQU8sRUFBRSxFQUFFO1lBQ1QsTUFB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QUUsQ0FBUyxFQUFFLEVBQUU7Z0JBQ2hDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEMsQ0FBQyxHQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ1IsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7OztZQXhIRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IG1hdGNoU2VsZWN0b3JzID0gW1xuICAnbWF0Y2hlcycsXG4gICd3ZWJraXRNYXRjaGVzU2VsZWN0b3InLFxuICAnbW96TWF0Y2hlc1NlbGVjdG9yJyxcbiAgJ21zTWF0Y2hlc1NlbGVjdG9yJyxcbiAgJ29NYXRjaGVzU2VsZWN0b3InXG5dO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hNdWx0aXNlbGVjdFNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgcHNldWRvQ2xhc3NFeGlzdChub2RlLCBzZWxlY3Rvcikge1xuICAgIGNvbnN0IG5hdGl2ZU1hdGNoZXMgPSBub2RlLm1hdGNoZXMgfHwgbm9kZS5tc01hdGNoZXNTZWxlY3RvcjtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5hdGl2ZU1hdGNoZXMuY2FsbChub2RlLCBzZWxlY3Rvcik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBjbG9zZXN0KGVsLCBzZWxlY3Rvcik6IGJvb2xlYW4ge1xuICAgIGxldCBtYXRjaGVzRm47XG4gICAgLy8gZmluZCB2ZW5kb3IgcHJlZml4XG4gICAgbWF0Y2hTZWxlY3RvcnMuc29tZShmdW5jdGlvbihmbikge1xuICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5W2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBtYXRjaGVzRm4gPSBmbjtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG5cbiAgICBsZXQgcGFyZW50O1xuXG4gICAgLy8gdHJhdmVyc2UgcGFyZW50c1xuICAgIHdoaWxlIChlbCkge1xuICAgICAgcGFyZW50ID0gZWwucGFyZW50RWxlbWVudDtcbiAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50W21hdGNoZXNGbl0oc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgICB9XG4gICAgICBlbCA9IHBhcmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUT0RPOiBtYWtlIHRoaXMgbG9naWMgdG8gd29yayB0byBmaW5kIGFsbCBkZXNjZW5kYW50IGdyb3Vwc1xuICBjb2xsZWN0QWxsRGVzY2VuZGFudHMoY29sbGVjdGlvbiwgZ3JvdXBQcm9wZXJ0eSwgZ3JvdXBOYW1lKSB7XG4gICAgY29uc3QgYWxsRGVzY2VuZGFudHMgPSBjb2xsZWN0aW9uLmZpbHRlcihpdGVtID0+IGl0ZW1bZ3JvdXBQcm9wZXJ0eV0gPT0gZ3JvdXBOYW1lKTtcbiAgICBhbGxEZXNjZW5kYW50cy5jb25jYXQoY29sbGVjdGlvbi5maWx0ZXIoaXRlbSA9PiBpdGVtLnBhcmVudCA9PSBncm91cE5hbWUpKTtcbiAgICByZXR1cm4gYWxsRGVzY2VuZGFudHM7XG4gIH1cblxuICBwcml2YXRlIGFsbERlc2NlbmRhbnRzQXJlVGlja2VkKGNvbGxlY3Rpb24sIGdyb3VwUHJvcGVydHksIGdyb3VwTmFtZSkge1xuICAgIGNvbnN0IGFsbERlc2NlbmRhbnRzID0gdGhpcy5jb2xsZWN0QWxsRGVzY2VuZGFudHMoY29sbGVjdGlvbiwgZ3JvdXBQcm9wZXJ0eSwgZ3JvdXBOYW1lKTtcbiAgICBjb25zdCBhbGxBcmVUaWNrZWQgPSBhbGxEZXNjZW5kYW50cy5ldmVyeShkID0+IGQudGlja2VkKTtcbiAgICByZXR1cm4gYWxsQXJlVGlja2VkO1xuICB9XG4gIHByaXZhdGUgYWxsRGVzY2VuZGFudHNBcmVEaXNhYmxlZChjb2xsZWN0aW9uLCBncm91cFByb3BlcnR5LCBncm91cE5hbWUpIHtcbiAgICBjb25zdCBhbGxEZXNjZW5kYW50cyA9IHRoaXMuY29sbGVjdEFsbERlc2NlbmRhbnRzKGNvbGxlY3Rpb24sIGdyb3VwUHJvcGVydHksIGdyb3VwTmFtZSk7XG4gICAgY29uc3QgYWxsQXJlRGlzYWJsZWQgPSBhbGxEZXNjZW5kYW50cy5ldmVyeShkID0+IGQuZGlzYWJsZWQpO1xuICAgIHJldHVybiBhbGxBcmVEaXNhYmxlZDtcbiAgfVxuXG4gIG9wdGlvbnNHcm91cGluZyhvcHRpb25zLCBncm91cEJ5UHJvcGVydHkpOiBhbnlbXSB7XG4gICAgY29uc3QgZ2V0QWxsVW5pcXVlR3JvdXBCeVByb3BlcnR5VmFsdWUgPSB0aGlzLmZpbmRVbmlxdWUob3B0aW9ucy5tYXAoaXRlbSA9PiBpdGVtW2dyb3VwQnlQcm9wZXJ0eV0pKTtcbiAgICBjb25zdCByZXN1bHQgPSBnZXRBbGxVbmlxdWVHcm91cEJ5UHJvcGVydHlWYWx1ZS5tYXAoZ3JvdXAgPT4ge1xuICAgICAgY29uc3QgZ3JvdXBlZFZhbHVlcyA9IG9wdGlvbnMuZmlsdGVyKG8gPT4gb1tncm91cEJ5UHJvcGVydHldID09PSBncm91cCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBncm91cCxcbiAgICAgICAgdmFsdWVzOiBncm91cGVkVmFsdWVzLFxuICAgICAgICB0aWNrZWQ6IGdyb3VwZWRWYWx1ZXMuZXZlcnkobyA9PiBvLnRpY2tlZCksXG4gICAgICAgIGRpc2FibGVkOiBncm91cGVkVmFsdWVzLmV2ZXJ5KG8gPT4gby5kaXNhYmxlZClcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZpbmRVbmlxdWUoZXhwcmVzc2lvbikge1xuICAgIHJldHVybiBbLi4uQXJyYXkuZnJvbShuZXcgU2V0KGV4cHJlc3Npb24pKV07XG4gIH1cblxuICB2aXJ0dWFsT3B0aW9uc0dyb3VwaW5nRmxhdHRlbihvcHRpb25zLCBncm91cEJ5UHJvcGVydHkpOiBhbnlbXSB7XG4gICAgY29uc3QgYWxsUGFyZW50R3JvdXBlZFZhbHVlcyA9IHRoaXMuZmluZFVuaXF1ZShvcHRpb25zLmZpbHRlcihvID0+ICFvLnBhcmVudCkubWFwKGl0ZW0gPT4gaXRlbVtncm91cEJ5UHJvcGVydHldKSk7XG4gICAgY29uc3Qgc3ViR3JvdXBlZFZhbHVlcyA9IHRoaXMuZmluZFVuaXF1ZShcbiAgICAgIG9wdGlvbnMuZmlsdGVyKG8gPT4gby5wYXJlbnQpLm1hcCgoeyBuYW1lLCBwYXJlbnQgfSkgPT4gKHsgbmFtZSwgcGFyZW50IH0pKVxuICAgICk7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGFsbFBhcmVudEdyb3VwZWRWYWx1ZXMuZm9yRWFjaChncm91cCA9PiB7XG4gICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgIG5hbWU6IGdyb3VwLFxuICAgICAgICBpc0dyb3VwOiB0cnVlLFxuICAgICAgICB0aWNrZWQ6IHRoaXMuYWxsRGVzY2VuZGFudHNBcmVUaWNrZWQob3B0aW9ucywgZ3JvdXBCeVByb3BlcnR5LCBncm91cCksXG4gICAgICAgIGRpc2FibGVkOiB0aGlzLmFsbERlc2NlbmRhbnRzQXJlRGlzYWJsZWQob3B0aW9ucywgZ3JvdXBCeVByb3BlcnR5LCBncm91cClcbiAgICAgIH0pO1xuICAgICAgY29uc3QgZ3JvdXBlZFZhbHVlcyA9IG9wdGlvbnNcbiAgICAgICAgLmZpbHRlcihvID0+IG9bZ3JvdXBCeVByb3BlcnR5XSA9PT0gZ3JvdXAgJiYgIW8ucGFyZW50KVxuICAgICAgICAubWFwKHYgPT4gKHsgLi4udiwgZGVwdGg6IDEgfSkpO1xuICAgICAgcmVzdWx0ID0gWy4uLnJlc3VsdF0uY29uY2F0KGdyb3VwZWRWYWx1ZXMpO1xuICAgICAgY29uc3QgY2hpbGRHcm91cGVkVmFsdWVzID0gc3ViR3JvdXBlZFZhbHVlcy5maWx0ZXIoKHM6IGFueSkgPT4gcy5wYXJlbnQgPT09IGdyb3VwKTtcbiAgICAgIGNoaWxkR3JvdXBlZFZhbHVlcy5mb3JFYWNoKGMgPT4ge1xuICAgICAgICByZXN1bHQucHVzaCh7IG5hbWU6IGMsIHBhcmVudDogZ3JvdXAsIGlzR3JvdXA6IHRydWUgfSk7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IG9wdGlvbnMuZmlsdGVyKG8gPT4gb1tncm91cEJ5UHJvcGVydHldID09PSBjKS5tYXAodiA9PiAoeyAuLi52LCBkZXB0aDogMiB9KSk7XG4gICAgICAgIHJlc3VsdC5jb25jYXQodmFsdWVzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBtaXJyb3JPYmplY3QoanNvbikge1xuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBqc29uKSB7XG4gICAgICByZXRbanNvbltrZXldXSA9IGtleTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIG1hcERhdGFzb3VyY2VUb0ZpZWxkcyhjb2xsZWN0aW9uOiBhbnlbXSwgcHJvcGVydHlNYXAsIGdyb3VwZWRQcm9wZXJ0eT8pIHtcbiAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnR5TWFwKTtcbiAgICByZXR1cm4gY29sbGVjdGlvbi5tYXAoKGl0ZW06IGFueSkgPT4ge1xuICAgICAgbGV0IG9iaiA9IGdyb3VwZWRQcm9wZXJ0eSA/IHsgW2dyb3VwZWRQcm9wZXJ0eV06IGl0ZW1bZ3JvdXBlZFByb3BlcnR5XSB9IDoge307XG4gICAgICBrZXlzLnJlZHVjZSgoYTogYW55LCBiOiBzdHJpbmcpID0+IHtcbiAgICAgICAgb2JqW2JdID0gaXRlbVtwcm9wZXJ0eU1hcFtiXV07XG4gICAgICB9LCBvYmopO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9KTtcbiAgfVxufVxuIl19