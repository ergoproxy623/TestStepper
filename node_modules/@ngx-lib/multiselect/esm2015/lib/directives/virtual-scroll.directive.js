/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/virtual-scroll.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Input, ElementRef, Output, EventEmitter, Renderer2 } from '@angular/core';
export class VirtualScrollDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.scrollOffset = 0;
        this.itemHeight = 40;
        this.rangeChanged = new EventEmitter();
        this.lastScrollFireTime = 0;
    }
    /**
     * @param {?} count
     * @return {?}
     */
    set totalCount(count) {
        this._totalCount = count;
        count ? this.initialSetup() : this.reset();
    }
    /**
     * @return {?}
     */
    get() {
        return this._totalCount;
    }
    /**
     * @return {?}
     */
    reset() {
        if (this.top && this.bottom) {
            this.renderer.setStyle(this.top, 'height', 0);
            this.renderer.setStyle(this.bottom, 'height', 0);
            this.renderer.setProperty(this.el.nativeElement, 'scrollTop', 0);
        }
    }
    /**
     * @param {?} target
     * @return {?}
     */
    throttleScroll(target) {
        const { scrollTop, clientHeight } = target;
        /** @type {?} */
        const totalHeight = this.itemHeight * this._totalCount + this.scrollOffset;
        // Step: 1 - Calculate the position
        /** @type {?} */
        const topSpacing = scrollTop;
        /** @type {?} */
        const maxItemsRange = (clientHeight - this.scrollOffset) / this.itemHeight;
        // Step: 2 - What are the possible collection that can be rendered
        /** @type {?} */
        const rangeOffset = topSpacing % this.itemHeight;
        /** @type {?} */
        const rangeStart = topSpacing - rangeOffset;
        /** @type {?} */
        const topNonVisible = topSpacing / this.itemHeight;
        /** @type {?} */
        const itemStartRange = Math.floor(topNonVisible);
        /** @type {?} */
        const rangeToBeIncreamented = rangeOffset ? maxItemsRange + 1 : maxItemsRange;
        /** @type {?} */
        const calculatedEndRange = itemStartRange + rangeToBeIncreamented;
        /** @type {?} */
        const itemEndRange = calculatedEndRange >= this._totalCount ? this._totalCount : calculatedEndRange;
        /** @type {?} */
        const bottomSpacing = totalHeight - (rangeStart + rangeToBeIncreamented * this.itemHeight);
        // Step: 3 - Pass the range to the child directive
        this.renderer.setStyle(this.top, 'height', `${rangeStart}px`);
        this.renderer.setStyle(this.bottom, 'height', `${bottomSpacing}px`);
        this.rangeChanged.emit({ start: itemStartRange, end: itemEndRange });
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    onscroll({ target }) {
        /** @type {?} */
        const minScrollTime = 50;
        /** @type {?} */
        const now = new Date().getTime();
        if (!this.scrollTimer) {
            if (now - this.lastScrollFireTime > minScrollTime) {
                this.lastScrollFireTime = now;
            }
            this.scrollTimer = setTimeout((/**
             * @return {?}
             */
            () => {
                this.scrollTimer = null;
                this.lastScrollFireTime = new Date().getTime();
                this.throttleScroll(target);
            }), minScrollTime);
        }
    }
    /**
     * @return {?}
     */
    initialSetup() {
        // TODO: later think of usng ViewChild, instead of direct DOM manipulation.
        const { scrollTop, clientHeight } = this.el.nativeElement;
        this.top = this.renderer.selectRootElement('.top');
        this.bottom = this.renderer.selectRootElement('.bottom');
        this.renderer.setStyle(this.top, 'height', `${scrollTop}px`);
        this.renderer.setStyle(this.bottom, 'height', `${this.itemHeight * this._totalCount + this.scrollOffset - clientHeight}px`);
        this.renderer.setProperty(this.el.nativeElement, 'scrollTop', 0);
    }
}
VirtualScrollDirective.decorators = [
    { type: Directive, args: [{
                selector: '[msVirtualScroll]'
            },] }
];
/** @nocollapse */
VirtualScrollDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
VirtualScrollDirective.propDecorators = {
    itemHeight: [{ type: Input }],
    totalCount: [{ type: Input }],
    rangeChanged: [{ type: Output }],
    onscroll: [{ type: HostListener, args: ['scroll', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    VirtualScrollDirective.prototype._totalCount;
    /** @type {?} */
    VirtualScrollDirective.prototype.top;
    /** @type {?} */
    VirtualScrollDirective.prototype.bottom;
    /** @type {?} */
    VirtualScrollDirective.prototype.scrollOffset;
    /** @type {?} */
    VirtualScrollDirective.prototype.itemHeight;
    /** @type {?} */
    VirtualScrollDirective.prototype.rangeChanged;
    /**
     * @type {?}
     * @private
     */
    VirtualScrollDirective.prototype.scrollTimer;
    /**
     * @type {?}
     * @private
     */
    VirtualScrollDirective.prototype.lastScrollFireTime;
    /**
     * @type {?}
     * @private
     */
    VirtualScrollDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    VirtualScrollDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,