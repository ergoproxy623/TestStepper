import { Component, ElementRef, Renderer, ViewContainerRef, forwardRef, Input, EventEmitter, Output, ViewChild, HostListener } from '@angular/core';
import { DropdownContainerComponent } from './dropdown-container.component';
import { DropdownState } from './dropdown.state';
import { ComponentLoaderFactory } from '../component-loader/component-loader.factory';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export var MultiselectComponent = (function () {
    function MultiselectComponent(_elementRef, _renderer, _viewContainerRef, _cis, _state) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._viewContainerRef = _viewContainerRef;
        this._cis = _cis;
        this._state = _state;
        this.change = new EventEmitter();
        this.onTouched = Function.prototype;
        this.onChange = Function.prototype;
        this._subscriptions = [];
        // create dropdown component loader
        this._dropdown = this._cis
            .createLoader(this._elementRef, this._viewContainerRef, this._renderer)
            .provide({ provide: DropdownState, useValue: this._state });
    }
    MultiselectComponent.prototype.ngOnInit = function () {
        var _this = this;
        this._subscriptions.push(this._state
            .toggleClick.subscribe(function (value) {
            _this.toggle(value);
        }));
        this.placeholder = this.placeholder || '';
    };
    MultiselectComponent.prototype.ngOnDestroy = function () {
        for (var _i = 0, _a = this._subscriptions; _i < _a.length; _i++) {
            var sub = _a[_i];
            sub.unsubscribe();
        }
        this._dropdown.dispose();
    };
    MultiselectComponent.prototype.writeValue = function (v) {
        this._value = v;
    };
    MultiselectComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    MultiselectComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    MultiselectComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    Object.defineProperty(MultiselectComponent.prototype, "multiple", {
        get: function () {
            return this._multiple;
        },
        set: function (value) {
            this._multiple = this.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiselectComponent.prototype, "disabled", {
        get: function () {
            return this._isDisabled;
        },
        set: function (value) {
            this._isDisabled = this.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiselectComponent.prototype, "required", {
        get: function () {
            return this._required;
        },
        set: function (value) {
            this._required = this.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiselectComponent.prototype, "readonly", {
        get: function () {
            return this._readonly;
        },
        set: function (value) {
            this._readonly = this.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiselectComponent.prototype, "allowSearch", {
        get: function () {
            return this._allowSearch;
        },
        set: function (value) {
            this._allowSearch = this.coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiselectComponent.prototype, "options", {
        get: function () {
            return this._options;
        },
        set: function (value) {
            this._options = value;
        },
        enumerable: true,
        configurable: true
    });
    MultiselectComponent.prototype.clearSelection = function (event) {
        if (!this.disabled || !this.readonly) {
            this._value = null;
            this.onChange(this._value);
            this.change.emit(this._value);
        }
        event.stopPropagation();
    };
    MultiselectComponent.prototype.displayValue = function () {
        if (this._value instanceof Array) {
            var count = this._value.length;
            if (this._value.length) {
                return count === 1
                    ? (this.displayName ? this._value[0][this.displayName] : this._value[0])
                    : count + ' selected';
            }
            else {
                return '';
            }
        }
        else if (this._value) {
            return this.displayName ? this._value[this.displayName] : this._value;
        }
        else {
            return '';
        }
    };
    MultiselectComponent.prototype.toggle = function (value) {
        if ((this.isOpen && this._dropdown.isShown) || value === false) {
            return this.hide();
        }
        return this.show();
    };
    MultiselectComponent.prototype.show = function () {
        if (this.disabled || this.readonly) {
            return;
        }
        if (this._dropdown.isShown) {
            return;
        }
        this.syncOptions();
        this._dropdown
            .attach(DropdownContainerComponent)
            .to('body')
            .position({ attachment: 'bottom right' })
            .show({
            content: this.dropdownRef,
            placement: 'bottom right'
        });
        this._state.isOpenChange.emit(true);
        this.isOpen = true;
        this.dropdownMenuWidth = this._elementRef.nativeElement.offsetWidth;
    };
    MultiselectComponent.prototype.hide = function () {
        this._dropdown.hide();
        this._state.isOpenChange.emit(false);
        this.isOpen = false;
    };
    MultiselectComponent.prototype.onDocumentClick = function (event) {
        if (event.button !== 2 && this._dropdown.isShown &&
            !this._elementRef.nativeElement.contains(event.target) &&
            !this.dropdownMenu.nativeElement.contains(event.target)) {
            this._state.toggleClick.emit(false);
        }
    };
    MultiselectComponent.prototype.selectAll = function (event) {
        event.stopPropagation();
        this._value = this.options.map(function (v) {
            return v;
        });
        this.onChange(this._value);
        this.change.emit(this._value);
        this.hide();
    };
    MultiselectComponent.prototype.search = function (event) {
        var _this = this;
        var value = event.target.value;
        if (value) {
            var options = this._options;
            this.optionList = options.filter(function (v) {
                var displayedValue = _this.displayName ? v[_this.displayName] : v;
                var regex = new RegExp('(' + value + ')', 'i');
                return (typeof displayedValue === 'string') ? regex.test(displayedValue) : false;
            });
        }
        else {
            this.syncOptions();
        }
    };
    MultiselectComponent.prototype.selectValue = function (item) {
        if (this.multiple) {
            this._value = !(this._value instanceof Array) ? [] : this._value;
            var index = this.findIndex(this._value, item);
            if (index >= 0) {
                this._value.splice(index, 1);
            }
            else {
                this._value.push(item);
            }
        }
        else {
            this._value = item;
            this.hide();
        }
        this.onChange(this._value);
        this.change.emit(this._value);
    };
    MultiselectComponent.prototype.isSelected = function (item) {
        var track = this.trackBy;
        if (this._value) {
            if (track) {
                return this.multiple
                    ? this.exist(track, item)
                    : this._value[track] === item[track];
            }
            else {
                return this.multiple
                    ? (this._value instanceof Array) ? this._value.indexOf(item) >= 0 : false
                    : this._value === item;
            }
        }
        return false;
    };
    MultiselectComponent.prototype.markActive = function (item) {
        if (this.multiple === false) {
            return this.isSelected(item);
        }
    };
    MultiselectComponent.prototype.exist = function (track, item) {
        var values = this._value;
        if (values instanceof Array) {
            return values.length ? (values.findIndex(function (v) {
                if (v[track] === item[track]) {
                    return true;
                }
            })) >= 0 : false;
        }
        else {
            return values[track] === item[track];
        }
    };
    MultiselectComponent.prototype.findIndex = function (values, item) {
        var track = this.trackBy;
        return values
            .findIndex(function (v) {
            if (track && v[track] === item[track]) {
                return true;
            }
            else if (v === item) {
                return true;
            }
        });
    };
    MultiselectComponent.prototype.syncOptions = function () {
        this.optionList = this.options.map(function (v) {
            return v;
        });
    };
    MultiselectComponent.prototype.coerceBooleanProperty = function (value) {
        return value != null && '' + value !== 'false';
    };
    MultiselectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-multiselect',
                    template: "\n    <div class=\"input-group\">\n      <ng-content select=\".input-group-btn\"></ng-content>\n      <ng-content select=\".input-group-addon\"></ng-content>\n      <input class=\"form-control\" [placeholder]=\"placeholder\" [value]=\"displayValue()\"\n             autocomplete=\"off\" readonly (click)=\"toggle()\" [disabled]=\"disabled\"\n             autocapitalize=\"off\" autocorrect=\"off\" [class.ready]=\"!disabled && !readonly\">\n      <div class=\"input-group-btn\">\n        <button class=\"btn btn-default\" (click)=\"clearSelection($event)\" [disabled]=\"disabled || readonly\">\n          <i class=\"glyphicon glyphicon-remove\"></i>\n        </button>\n      </div>\n    </div>\n    <i class=\"caret\" (click)=\"toggle()\"></i>\n    <template #dropdownRef>\n      <ul class=\"dropdown-menu dropdown-menu-right\" [style.min-width.px]=\"dropdownMenuWidth\" #dropdownMenu>\n        <li *ngIf=\"multiple\"><a (click)=\"selectAll($event)\" class=\"action\">Select All</a></li>\n        <li *ngIf=\"multiple\" class=\"divider\"></li>\n        <li *ngIf=\"allowSearch\" class=\"search-container\">\n          <input class=\"form-control input-sm\" placeholder=\"Search...\" (keyup)=\"search($event)\" autocapitalize=\"off\"\n                 autocorrect=\"off\"></li>\n        <li>\n          <ul class=\"list-unstyled option-list\">\n            <li class=\"selectable\" *ngFor=\"let item of optionList\" [ngClass]=\"{'active' : markActive(item)}\"><a\n              (click)=\"selectValue(item)\" [ngClass]=\"{'multiple': multiple}\">\n              <i class=\"glyphicon glyphicon-ok\" *ngIf=\"multiple\" [ngClass]=\"{'no-visible': !isSelected(item)}\"></i>\n              <span *ngIf=\"displayName\">{{item[displayName]}}</span> <span *ngIf=\"!displayName\">{{item}}</span> </a>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </template>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return MultiselectComponent; }),
                            multi: true
                        }],
                    styles: ["\n    .dropdown-menu {\n      padding: 0;\n    }\n\n    .option-list {\n      max-height: 300px;\n      overflow-y: auto;\n    }\n\n    li a {\n      cursor: pointer;\n    }\n\n    .option-list li a {\n      display: block;\n      padding: 3px 10px;\n      clear: both;\n      font-weight: 400;\n      line-height: 1.42857143;\n      color: #333;\n      white-space: nowrap;\n    }\n\n    .option-list > li > a:focus, .option-list > li > a:hover {\n      color: #262626;\n      text-decoration: none;\n      background-color: #f5f5f5;\n    }\n\n    li a.action {\n      font-style: italic;\n    }\n\n    li a i {\n      font-size: 12px;\n    }\n\n    .selectable {\n      background-color: #fff;\n    }\n\n    .multiple {\n      padding-left: 10px !important;\n    }\n\n    .no-visible {\n      visibility: hidden;\n    }\n\n    .divider {\n      margin: 2px;\n    }\n\n    .search-container {\n      padding: 3px;\n    }\n\n    input.form-control {\n      padding: 6px 20px 6px 12px;\n    }\n\n    input.form-control.ready {\n      background-color: #fff;\n      cursor: pointer;\n    }\n\n    .caret {\n      position: absolute;\n      top: 45%;\n      right: 45px;\n      z-index: 10;\n    }\n\n    .glyphicon {\n      font-size: 12px;\n    }\n\n    :host {\n      display: block;\n      position: relative;\n    }\n  "
                    ]
                },] },
    ];
    /** @nocollapse */
    MultiselectComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer, },
        { type: ViewContainerRef, },
        { type: ComponentLoaderFactory, },
        { type: DropdownState, },
    ]; };
    MultiselectComponent.propDecorators = {
        'placeholder': [{ type: Input },],
        'change': [{ type: Output },],
        'displayName': [{ type: Input },],
        'trackBy': [{ type: Input },],
        'dropdownRef': [{ type: ViewChild, args: ['dropdownRef',] },],
        'dropdownMenu': [{ type: ViewChild, args: ['dropdownMenu',] },],
        'multiple': [{ type: Input },],
        'disabled': [{ type: Input },],
        'required': [{ type: Input },],
        'readonly': [{ type: Input },],
        'allowSearch': [{ type: Input },],
        'options': [{ type: Input },],
        'onDocumentClick': [{ type: HostListener, args: ['document:click', ['$event'],] },],
    };
    return MultiselectComponent;
}());
//# sourceMappingURL=multiselect.component.js.map