import { OnInit, OnDestroy, ElementRef, Renderer, ViewContainerRef, EventEmitter, TemplateRef } from '@angular/core';
import { DropdownState } from './dropdown.state';
import { ComponentLoaderFactory } from '../component-loader/component-loader.factory';
import { ControlValueAccessor } from '@angular/forms';
export declare type ModelType = Object | Object[] | string | string[] | number | number[];
export declare class MultiselectComponent implements ControlValueAccessor, OnInit, OnDestroy {
    private _elementRef;
    private _renderer;
    private _viewContainerRef;
    private _cis;
    private _state;
    placeholder: string;
    change: EventEmitter<ModelType>;
    displayName: string;
    trackBy: string;
    dropdownMenuWidth: number;
    optionList: Object[] | number[] | string[];
    onTouched: any;
    onChange: any;
    dropdownRef: TemplateRef<any>;
    dropdownMenu: ElementRef;
    private _multiple;
    private _isDisabled;
    private _required;
    private _readonly;
    private _allowSearch;
    private _options;
    private _value;
    private _dropdown;
    private _subscriptions;
    private isOpen;
    constructor(_elementRef: ElementRef, _renderer: Renderer, _viewContainerRef: ViewContainerRef, _cis: ComponentLoaderFactory, _state: DropdownState);
    ngOnInit(): void;
    ngOnDestroy(): void;
    writeValue(v: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    multiple: any;
    disabled: any;
    required: any;
    readonly: any;
    allowSearch: any;
    options: Object[] | number[] | string[];
    clearSelection(event: any): void;
    displayValue(): any;
    toggle(value?: boolean): void;
    show(): void;
    hide(): void;
    onDocumentClick(event: any): void;
    selectAll(event: any): void;
    search(event: any): void;
    selectValue(item: any): void;
    isSelected(item: any): boolean;
    markActive(item: any): boolean;
    exist(track: string, item: any): boolean;
    findIndex(values: any, item: any): any;
    private syncOptions();
    private coerceBooleanProperty(value);
}
